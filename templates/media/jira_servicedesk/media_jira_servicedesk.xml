<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2020-04-28T10:16:41Z</date>
    <media_types>
        <media_type>
            <name>Jira ServiceDesk</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>alert_message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>alert_subject</name>
                    <value>{ALERT.SUBJECT}</value>
                </parameter>
                <parameter>
                    <name>event_recovery_value</name>
                    <value>{EVENT.RECOVERY.VALUE}</value>
                </parameter>
                <parameter>
                    <name>event_source</name>
                    <value>{EVENT.SOURCE}</value>
                </parameter>
                <parameter>
                    <name>event_tags_json</name>
                    <value>{EVENT.TAGSJSON}</value>
                </parameter>
                <parameter>
                    <name>event_update_status</name>
                    <value>{EVENT.UPDATE.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_value</name>
                    <value>{EVENT.VALUE}</value>
                </parameter>
                <parameter>
                    <name>jira_password</name>
                    <value>&lt;PLACE PASSWORD OR TOKEN&gt;</value>
                </parameter>
                <parameter>
                    <name>jira_request_key</name>
                    <value>{EVENT.TAGS.__zbx_jira_requestkey}</value>
                </parameter>
                <parameter>
                    <name>jira_request_type_id</name>
                    <value>&lt;PLACE REQUEST TYPE ID&gt;</value>
                </parameter>
                <parameter>
                    <name>jira_servicedesk_id</name>
                    <value>&lt;PLACE SERVICEDESK ID&gt;</value>
                </parameter>
                <parameter>
                    <name>jira_url</name>
                    <value>&lt;PLACE YOUR JIRA URL&gt;</value>
                </parameter>
                <parameter>
                    <name>jira_user</name>
                    <value>&lt;PLACE LOGIN&gt;</value>
                </parameter>
            </parameters>
            <script>var Jira = {&#13;
    params: {},&#13;
    schema: {},&#13;
&#13;
    setParams: function (params) {&#13;
        if (typeof params !== 'object') {&#13;
            return;&#13;
        }&#13;
&#13;
        Jira.params = params;&#13;
        if (typeof Jira.params.url === 'string') {&#13;
            if (!Jira.params.url.endsWith('/')) {&#13;
                Jira.params.url += '/';&#13;
            }&#13;
&#13;
            Jira.params.url += 'rest/servicedeskapi/latest/';&#13;
        }&#13;
    },&#13;
&#13;
    setProxy: function (HTTPProxy) {&#13;
        Jira.HTTPProxy = HTTPProxy;&#13;
    },&#13;
&#13;
    setTags: function(event_tags_json) {&#13;
        if (!Jira.schema) {&#13;
            Zabbix.Log(4, '[ Jira Service Desk Webhook ] Cannot add labels because failed to retrieve field schema.');&#13;
&#13;
            return;&#13;
        }&#13;
&#13;
        var block = Jira.schema.requestTypeFields.filter(function(object) {&#13;
            return object.fieldId == 'labels';&#13;
        });&#13;
&#13;
        if (block[0] &amp;&amp; typeof event_tags_json !== 'undefined' &amp;&amp; event_tags_json !== ''&#13;
            &amp;&amp; event_tags_json !== '{EVENT.TAGSJSON}') {&#13;
            try {&#13;
                var tags = JSON.parse(event_tags_json),&#13;
                    label;&#13;
&#13;
                Jira.labels = [];&#13;
&#13;
                tags.forEach(function (tag) {&#13;
                    if (typeof tag.tag !== 'undefined' &amp;&amp; typeof tag.value !== 'undefined' ) {&#13;
                        label = (tag.tag + (tag.value ? (':' + tag.value) : '')).replace(/\s/g, '_');&#13;
                        if (label.length &lt; 255) {&#13;
                            Jira.labels.push(label);&#13;
                        }&#13;
                    }&#13;
                });&#13;
            }&#13;
            catch (error) {&#13;
                // Code is not missing here.&#13;
            }&#13;
        }&#13;
    },&#13;
&#13;
    addCustomFields: function (data, fields) {&#13;
        if (typeof fields === 'object' &amp;&amp; Object.keys(fields).length) {&#13;
            if (Jira.schema) {&#13;
                Object.keys(fields)&#13;
                    .forEach(function(field) {&#13;
                        data.requestFieldValues[field] = fields[field];&#13;
&#13;
                        var block = Jira.schema.requestTypeFields.filter(function(object) {&#13;
                            return object.fieldId == field;&#13;
                        });&#13;
&#13;
                        if (typeof block[0] === 'object' &amp;&amp; typeof block[0].jiraSchema === 'object'&#13;
                            &amp;&amp; (block[0].jiraSchema.type === 'number' || block[0].jiraSchema.type === 'datetime')) {&#13;
                            switch (block[0].jiraSchema.type) {&#13;
                                case 'number':&#13;
                                    data.requestFieldValues[field] = parseInt(fields[field]);&#13;
                                    break;&#13;
&#13;
                                case 'datetime':&#13;
                                    if (fields[field].match(/\d+[.-]\d+[.-]\d+T\d+:\d+:\d+/) !== null) {&#13;
                                        data.requestFieldValues[field] = fields[field].replace(/\./g, '-');&#13;
                                    }&#13;
                                    else {&#13;
                                        delete data.requestFieldValues[field];&#13;
                                    }&#13;
                                    break;&#13;
                            }&#13;
                        }&#13;
                    });&#13;
            }&#13;
            else {&#13;
                Zabbix.Log(4, '[ Jira Service Desk Webhook ] Cannot add custom fields' +&#13;
                    'because failed to retrieve field schema.');&#13;
            }&#13;
        }&#13;
&#13;
        return data;&#13;
    },&#13;
&#13;
    request: function (method, query, data) {&#13;
        ['url', 'user', 'password', 'servicedesk_id', 'request_type_id'].forEach(function (field) {&#13;
            if (typeof Jira.params !== 'object' || typeof Jira.params[field] === 'undefined'&#13;
                || Jira.params[field] === '' ) {&#13;
                throw 'Required Jira param is not set: &quot;' + field + '&quot;.';&#13;
            }&#13;
        });&#13;
&#13;
        var response,&#13;
            url = Jira.params.url + query,&#13;
            request = new CurlHttpRequest();&#13;
&#13;
        request.AddHeader('Content-Type: application/json');&#13;
        request.AddHeader('Authorization: Basic ' + btoa(Jira.params.user + ':' + Jira.params.password));&#13;
        request.AddHeader('X-ExperimentalApi: opt-in');&#13;
&#13;
        if (typeof Jira.HTTPProxy !== 'undefined' &amp;&amp; Jira.HTTPProxy !== '') {&#13;
            request.SetProxy(Jira.HTTPProxy);&#13;
        }&#13;
&#13;
        if (typeof data !== 'undefined') {&#13;
            data = JSON.stringify(data);&#13;
        }&#13;
&#13;
        Zabbix.Log(4, '[ Jira Service Desk Webhook ] Sending request: ' + url +&#13;
            ((typeof data === 'string') ? ('\n' + data) : ''));&#13;
&#13;
        switch (method) {&#13;
            case 'get':&#13;
                response = request.Get(url, data);&#13;
                break;&#13;
&#13;
            case 'post':&#13;
                response = request.Post(url, data);&#13;
                break;&#13;
&#13;
            case 'put':&#13;
                response = request.Put(url, data);&#13;
                break;&#13;
&#13;
            default:&#13;
                throw 'Unsupported HTTP request method: ' + method;&#13;
        }&#13;
&#13;
        Zabbix.Log(4, '[ Jira Service Desk Webhook ] Received response with status code ' +&#13;
            request.Status() + '\n' + response);&#13;
&#13;
        if (response !== null) {&#13;
            try {&#13;
                response = JSON.parse(response);&#13;
            }&#13;
            catch (error) {&#13;
                Zabbix.Log(4, '[ Jira Service Desk Webhook ] Failed to parse response received from Jira');&#13;
                response = null;&#13;
            }&#13;
        }&#13;
&#13;
        if (request.Status() &lt; 200 || request.Status() &gt;= 300) {&#13;
            var message = 'Request failed with status code ' + request.Status();&#13;
&#13;
            if (response !== null &amp;&amp; typeof response.errors !== 'undefined'&#13;
                &amp;&amp; Object.keys(response.errors).length &gt; 0) {&#13;
                message += ': ' + JSON.stringify(response.errors);&#13;
            }&#13;
            else if (response !== null &amp;&amp; typeof response.errorMessage !== 'undefined'&#13;
                &amp;&amp; Object.keys(response.errorMessage).length &gt; 0) {&#13;
                message += ': ' + JSON.stringify(response.errorMessage);&#13;
            }&#13;
&#13;
            throw message + ' Check debug log for more information.';&#13;
        }&#13;
&#13;
        return {&#13;
            status: request.Status(),&#13;
            response: response&#13;
        };&#13;
    },&#13;
&#13;
    getSchema: function() {&#13;
        var result = Jira.request('get', 'servicedesk/' + Jira.params.servicedesk_id + '/requesttype/' +&#13;
            Jira.params.request_type_id + '/field');&#13;
&#13;
        if (typeof Jira.schema !== 'object' &amp;&amp; typeof Jira.schema.requestTypeFields !== 'object') {&#13;
            Jira.schema = null;&#13;
        }&#13;
        else {&#13;
            Jira.schema = result.response;&#13;
        }&#13;
    },&#13;
&#13;
    createRequest: function(summary, description, fields) {&#13;
        var data = {&#13;
            serviceDeskId: Jira.params.servicedesk_id,&#13;
            requestTypeId: Jira.params.request_type_id,&#13;
            requestFieldValues: {&#13;
                summary: summary,&#13;
                description: description&#13;
            }&#13;
        };&#13;
&#13;
        if (Jira.labels &amp;&amp; Jira.labels.length &gt; 0) {&#13;
            data.requestFieldValues.labels = Jira.labels;&#13;
        }&#13;
        var result = Jira.request('post', 'request', Jira.addCustomFields(data, fields));&#13;
&#13;
        if (typeof result.response !== 'object' || typeof result.response.issueKey === 'undefined') {&#13;
            throw 'Cannot create Jira request. Check debug log for more information.';&#13;
        }&#13;
&#13;
        return result.response.issueKey;&#13;
    }&#13;
};&#13;
&#13;
try {&#13;
    var params = JSON.parse(value),&#13;
        fields = {},&#13;
        jira = {},&#13;
        comment = {public: true},&#13;
        result = {tags: {}},&#13;
        required_params = [&#13;
            'alert_subject', 'alert_message', 'event_source', 'event_value',&#13;
            'event_update_status', 'event_recovery_value'&#13;
        ];&#13;
&#13;
    Object.keys(params)&#13;
        .forEach(function (key) {&#13;
            if (key.startsWith('jira_')) {&#13;
                jira[key.substring(5)] = params[key];&#13;
            }&#13;
            else if (key.startsWith('customfield_')) {&#13;
                fields[key] = params[key];&#13;
            }&#13;
            else if (required_params.indexOf(key) !== -1 &amp;&amp; params[key] === '') {&#13;
                throw 'Parameter &quot;' + key + '&quot; cannot be empty.';&#13;
            }&#13;
        });&#13;
&#13;
    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&#13;
        throw 'Incorrect &quot;event_source&quot; parameter given: ' + params.event_source + '\nMust be 0-3.';&#13;
    }&#13;
&#13;
    // Check {EVENT.VALUE} for trigger-based and internal events.&#13;
    if (params.event_value !== '0' &amp;&amp; params.event_value !== '1'&#13;
        &amp;&amp; (params.event_source === '0' || params.event_source === '3')) {&#13;
        throw 'Incorrect &quot;event_value&quot; parameter given: ' + params.event_value + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&#13;
    if (params.event_update_status !== '0' &amp;&amp; params.event_update_status !== '1' &amp;&amp; params.event_source === '0') {&#13;
        throw 'Incorrect &quot;event_update_status&quot; parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    if (params.event_source !== '0' &amp;&amp; params.event_recovery_value === '0') {&#13;
        throw 'Recovery operations are supported only for trigger-based actions.';&#13;
    }&#13;
&#13;
    Jira.setParams(jira);&#13;
    Jira.setProxy(params.HTTPProxy);&#13;
    Jira.getSchema();&#13;
    Jira.setTags(params.event_tags_json);&#13;
&#13;
    // Create request for non trigger-based events.&#13;
    if (params.event_source !== '0' &amp;&amp; params.event_recovery_value !== '0') {&#13;
        Jira.createRequest(params.alert_subject, params.alert_message);&#13;
    }&#13;
    // Create request for trigger-based events.&#13;
    else if (params.event_value === '1' &amp;&amp; params.event_update_status === '0'&#13;
        &amp;&amp; jira.request_key === '{EVENT.TAGS.__zbx_jira_requestkey}') {&#13;
        var key = Jira.createRequest(params.alert_subject, params.alert_message, fields);&#13;
&#13;
        result.tags.__zbx_jira_requestkey = key;&#13;
        result.tags.__zbx_jira_requestlink = params.jira_url +&#13;
            (params.jira_url.endsWith('/') ? '' : '/') + 'browse/' + key;&#13;
    }&#13;
    // Comment created request for trigger-based event.&#13;
    else {&#13;
        if (jira.request_key === '{EVENT.TAGS.__zbx_jira_requestkey}' || jira.request_key.trim() === '') {&#13;
            throw 'Incorrect Request key given: ' + jira.request_key;&#13;
        }&#13;
        comment.body = params.alert_message;&#13;
        Jira.request('post', 'request/' + Jira.params.request_key + '/comment', comment);&#13;
    }&#13;
&#13;
    return JSON.stringify(result);&#13;
}&#13;
catch (error) {&#13;
    Zabbix.Log(3, '[ Jira Service Desk Webhook ] ERROR: ' + error);&#13;
    throw 'Sending failed: ' + error;&#13;
}</script>
            <process_tags>YES</process_tags>
            <show_event_menu>YES</show_event_menu>
            <event_menu_url>{EVENT.TAGS.__zbx_jira_requestlink}</event_menu_url>
            <event_menu_name>Jira ServiceDesk: {EVENT.TAGS.__zbx_jira_requestkey}</event_menu_name>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>{EVENT.NAME}</subject>
                    <message>Problem started at {EVENT.TIME} on {EVENT.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Operational data: {EVENT.OPDATA}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>{EVENT.NAME}</subject>
                    <message>Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>{EVENT.NAME}</subject>
                    <message>{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&#13;
{EVENT.UPDATE.MESSAGE}&#13;
&#13;
Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery rule: {DISCOVERY.RULE.NAME}&#13;
&#13;
Device IP: {DISCOVERY.DEVICE.IPADDRESS}&#13;
Device DNS: {DISCOVERY.DEVICE.DNS}&#13;
Device status: {DISCOVERY.DEVICE.STATUS}&#13;
Device uptime: {DISCOVERY.DEVICE.UPTIME}&#13;
&#13;
Device service name: {DISCOVERY.SERVICE.NAME}&#13;
Device service port: {DISCOVERY.SERVICE.PORT}&#13;
Device service status: {DISCOVERY.SERVICE.STATUS}&#13;
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Host name: {HOST.HOST}&#13;
Host IP: {HOST.IP}&#13;
Agent port: {HOST.PORT}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
