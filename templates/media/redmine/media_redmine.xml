<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2020-04-20T00:00:00Z</date>
    <media_types>
        <media_type>
            <name>Redmine</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>alert_message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>alert_subject</name>
                    <value>{ALERT.SUBJECT}</value>
                </parameter>
                <parameter>
                    <name>event_id</name>
                    <value>{EVENT.ID}</value>
                </parameter>
                <parameter>
                    <name>event_nseverity</name>
                    <value>{EVENT.NSEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_source</name>
                    <value>{EVENT.SOURCE}</value>
                </parameter>
                <parameter>
                    <name>event_update_message</name>
                    <value>{EVENT.UPDATE.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>event_update_status</name>
                    <value>{EVENT.UPDATE.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_value</name>
                    <value>{EVENT.VALUE}</value>
                </parameter>
                <parameter>
                    <name>redmine_access_key</name>
                    <value>&lt;PUT YOUR ACCESS KEY&gt;</value>
                </parameter>
                <parameter>
                    <name>redmine_issue_key</name>
                    <value>{EVENT.TAGS.__zbx_redmine_issue_id}</value>
                </parameter>
                <parameter>
                    <name>redmine_project</name>
                    <value>&lt;PUT YOUR PROJECT ID OR NAME&gt;</value>
                </parameter>
                <parameter>
                    <name>redmine_tracker_id</name>
                    <value>&lt;PUT YOUR TRACKER ID&gt;</value>
                </parameter>
                <parameter>
                    <name>redmine_url</name>
                    <value>&lt;PUT YOUR REDMINE URL&gt;</value>
                </parameter>
                <parameter>
                    <name>trigger_id</name>
                    <value>{TRIGGER.ID}</value>
                </parameter>
                <parameter>
                    <name>zabbix_url</name>
                    <value>{$ZABBIX.URL}</value>
                </parameter>
            </parameters>
            <script>var Redmine = {&#13;
    params: {},&#13;
&#13;
    setParams: function (params) {&#13;
        if (typeof params !== 'object') {&#13;
            return;&#13;
        }&#13;
&#13;
        Redmine.params = params;&#13;
        if (typeof Redmine.params.url === 'string') {&#13;
            if (!Redmine.params.url.endsWith('/')) {&#13;
                Redmine.params.url += '/';&#13;
            }&#13;
        }&#13;
    },&#13;
&#13;
    addCustomFields: function (data, fields) {&#13;
        if (typeof fields === 'object' &amp;&amp; Object.keys(fields).length) {&#13;
            var schema = Redmine.getSchema();&#13;
&#13;
            if (schema) {&#13;
                data.issue.custom_fields = [];&#13;
&#13;
                Object.keys(fields)&#13;
                    .forEach(function(field) {&#13;
                        for (var idx in schema.custom_fields) {&#13;
                            if (schema.custom_fields[idx].id != field) {&#13;
                                continue;&#13;
                            }&#13;
&#13;
                            var field_value;&#13;
&#13;
                            switch (schema.custom_fields[idx].field_format) {&#13;
                                case 'string':&#13;
                                    field_value = fields[field];&#13;
                                    break;&#13;
&#13;
                                case 'int':&#13;
                                    field_value = parseInt(fields[field]);&#13;
                                    break;&#13;
&#13;
                                case 'float':&#13;
                                    field_value = parseFloat(fields[field]);&#13;
                                    break;&#13;
&#13;
                                case 'date':&#13;
                                    if (fields[field].match(/^\d{4}[.-]\d{2}[.-]\d{2}$/)) {&#13;
                                        field_value = fields[field].replace(/\./g, '-');&#13;
                                    }&#13;
                                    break;&#13;
                            }&#13;
&#13;
                            if (field_value !== undefined) {&#13;
                                data.issue.custom_fields.push({id: field, value: field_value});&#13;
                            }&#13;
                        }&#13;
                    });&#13;
            }&#13;
            else {&#13;
                Zabbix.Log(4, '[ Redmine Webhook ] Failed to retrieve field schema.');&#13;
            }&#13;
        }&#13;
&#13;
        return data;&#13;
    },&#13;
&#13;
    request: function (method, query, data) {&#13;
        ['url', 'access_key'].forEach(function (field) {&#13;
            if (typeof Redmine.params !== 'object' || typeof Redmine.params[field] === 'undefined'&#13;
                || Redmine.params[field] === '' ) {&#13;
                throw 'Required param is not set: &quot;' + field + '&quot;.';&#13;
            }&#13;
        });&#13;
&#13;
        var response,&#13;
            url = Redmine.params.url + query,&#13;
            request = new CurlHttpRequest();&#13;
&#13;
        if (typeof Redmine.HTTPProxy === 'string' &amp;&amp; Redmine.HTTPProxy.trim() !== '') {&#13;
            request.SetProxy(Redmine.HTTPProxy);&#13;
        }&#13;
&#13;
        request.AddHeader('Content-Type: application/json');&#13;
        request.AddHeader('X-Redmine-API-Key: ' + Redmine.params.access_key);&#13;
&#13;
        if (typeof data !== 'undefined') {&#13;
            data = JSON.stringify(data);&#13;
        }&#13;
&#13;
        Zabbix.Log(4, '[ Redmine Webhook ] Sending request: ' +&#13;
            url + ((typeof data === 'string') ? (' ' + data) : ''));&#13;
&#13;
        switch (method) {&#13;
            case 'get':&#13;
                response = request.Get(url, data);&#13;
                break;&#13;
&#13;
            case 'post':&#13;
                response = request.Post(url, data);&#13;
                break;&#13;
&#13;
            case 'put':&#13;
                response = request.Put(url, data);&#13;
                break;&#13;
&#13;
            default:&#13;
                throw 'Unsupported HTTP request method: ' + method;&#13;
        }&#13;
&#13;
        Zabbix.Log(4, '[ Redmine Webhook ] Received response with status code ' + request.Status() + ': ' + response);&#13;
&#13;
        if (response !== null) {&#13;
            try {&#13;
                response = JSON.parse(response);&#13;
            }&#13;
            catch (error) {&#13;
                Zabbix.Log(4, '[ Redmine Webhook ] Failed to parse response received from Redmine');&#13;
                response = null;&#13;
            }&#13;
        }&#13;
&#13;
        if (request.Status() &lt; 200 || request.Status() &gt;= 300) {&#13;
            var message = 'Request failed with status code ' + request.Status();&#13;
&#13;
            if (response !== null &amp;&amp; typeof response.errors !== 'undefined'&#13;
                &amp;&amp; Object.keys(response.errors).length &gt; 0) {&#13;
                message += ': ' + JSON.stringify(response.errors);&#13;
            }&#13;
            else if (response !== null &amp;&amp; typeof response.errorMessages !== 'undefined'&#13;
                &amp;&amp; Object.keys(response.errorMessages).length &gt; 0) {&#13;
                message += ': ' + JSON.stringify(response.errorMessages);&#13;
            }&#13;
&#13;
            throw message + ' Check debug log for more information.';&#13;
        }&#13;
&#13;
        return {&#13;
            status: request.Status(),&#13;
            response: response&#13;
        };&#13;
    },&#13;
&#13;
    getProjectID: function(name) {&#13;
        var result = Redmine.request('get', 'projects.json'),&#13;
            project_id;&#13;
&#13;
        if (result.response) {&#13;
            var projects = result.response.projects || [];&#13;
&#13;
            for (var i in projects) {&#13;
                if (projects[i].name === name) {&#13;
                    project_id = projects[i].id;&#13;
                    break;&#13;
                }&#13;
            }&#13;
        }&#13;
        else {&#13;
            Zabbix.Log(4, '[ Redmine Webhook ] Failed to retrieve project data.');&#13;
        }&#13;
&#13;
        if (typeof project_id === 'undefined') {&#13;
            throw 'Cannot find project with name: ' + name;&#13;
        }&#13;
&#13;
        return project_id;&#13;
    },&#13;
&#13;
    getSchema: function() {&#13;
        var result = Redmine.request('get', 'custom_fields.json');&#13;
&#13;
        return result.response;&#13;
    },&#13;
&#13;
    createIssue: function(subject, description, priority, fields) {&#13;
        var project_id = /^\d+$/.test(Redmine.params.project)&#13;
                ? Redmine.params.project&#13;
                : Redmine.getProjectID(Redmine.params.project),&#13;
            data = {&#13;
                issue: {&#13;
                    project_id: project_id,&#13;
                    tracker_id: Redmine.params.tracker_id,&#13;
                    subject: subject,&#13;
                    description: description&#13;
                }&#13;
            },&#13;
            result;&#13;
&#13;
        if (priority) {&#13;
            data.issue.priority_id = priority;&#13;
        }&#13;
&#13;
        result = Redmine.request('post', 'issues.json', Redmine.addCustomFields(data, fields));&#13;
&#13;
        if (typeof result.response !== 'object'&#13;
            || typeof result.response.issue.id === 'undefined'&#13;
            || result.status != 201) {&#13;
            throw 'Cannot create Redmine issue. Check debug log for more information.';&#13;
        }&#13;
&#13;
        return result.response.issue.id;&#13;
    },&#13;
&#13;
    updateIssue: function(note, fields) {&#13;
        var data = {&#13;
            issue: {&#13;
                notes: note || ''&#13;
            }&#13;
        };&#13;
&#13;
        Redmine.request('put', 'issues/' + Redmine.params.issue_key + '.json', Redmine.addCustomFields(data, fields));&#13;
    }&#13;
};&#13;
&#13;
try {&#13;
    var params = JSON.parse(value),&#13;
        params_redmine = {},&#13;
        params_fields = {},&#13;
        params_update = {},&#13;
        result = {tags: {}},&#13;
        required_params = [&#13;
            'alert_subject', 'tracker_id', 'project',&#13;
            'event_source', 'event_value',  'event_update_status'&#13;
        ],&#13;
        severities = [&#13;
            {name: 'not_classified', color: '#97AAB3'},&#13;
            {name: 'information', color: '#7499FF'},&#13;
            {name: 'warning', color: '#FFC859'},&#13;
            {name: 'average', color: '#FFA059'},&#13;
            {name: 'high', color: '#E97659'},&#13;
            {name: 'disaster', color: '#E45959'},&#13;
            {name: 'resolved', color: '#009900'},&#13;
            {name: null, color: '#000000'}&#13;
        ],&#13;
        priority;&#13;
&#13;
    Object.keys(params)&#13;
        .forEach(function (key) {&#13;
            if (key.startsWith('redmine_')) {&#13;
                params_redmine[key.substring(8)] = params[key];&#13;
            }&#13;
            else if (key.startsWith('customfield_')) {&#13;
                params_fields[key.substring(12)] = params[key];&#13;
            }&#13;
            else if (key.startsWith('event_update_')) {&#13;
                params_update[key.substring(13)] = params[key];&#13;
            }&#13;
            else if (required_params.indexOf(key) !== -1 &amp;&amp; params[key].trim() === '') {&#13;
                throw 'Parameter &quot;' + key + '&quot; cannot be empty.';&#13;
            }&#13;
        });&#13;
&#13;
    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&#13;
        throw 'Incorrect &quot;event_source&quot; parameter given: ' + params.event_source + '\nMust be 0-3.';&#13;
    }&#13;
&#13;
    // Check {EVENT.VALUE} for trigger-based and internal events.&#13;
    if (params.event_value !== '0' &amp;&amp; params.event_value !== '1'&#13;
        &amp;&amp; (params.event_source === '0' || params.event_source === '3')) {&#13;
        throw 'Incorrect &quot;event_value&quot; parameter given: ' + params.event_value + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&#13;
    if (params.event_source === '0' &amp;&amp; params.event_update_status !== '0' &amp;&amp; params.event_update_status !== '1') {&#13;
        throw 'Incorrect &quot;event_update_status&quot; parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    if (params.event_source !== '0' &amp;&amp; params.event_value === '0') {&#13;
        throw 'Recovery operations are supported only for trigger-based actions.';&#13;
    }&#13;
&#13;
    if (params.event_source === '0'&#13;
        &amp;&amp; ((params.event_value === '1' &amp;&amp; params.event_update_status === '1')&#13;
            || (params.event_value === '0'&#13;
                &amp;&amp; (params.event_update_status === '0' || params.event_update_status === '1')))&#13;
        &amp;&amp; (isNaN(parseInt(params.redmine_issue_key)) || parseInt(params.redmine_issue_key) &lt; 1 )) {&#13;
        throw 'Incorrect &quot;redmine_issue_key&quot; parameter given: ' + params.redmine_issue_key +&#13;
            '\nMust be positive integer.';&#13;
    }&#13;
&#13;
    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&#13;
        params.event_nseverity = '7';&#13;
    }&#13;
&#13;
    if (params.event_value === '0') {&#13;
        params.event_nseverity = '6';&#13;
    }&#13;
&#13;
    priority = params['severity_' + severities[params.event_nseverity].name];&#13;
    priority = priority &amp;&amp; priority.trim() || severities[7].name;&#13;
&#13;
    Redmine.setParams(params_redmine);&#13;
    Redmine.HTTPProxy = params.HTTPProxy;&#13;
&#13;
    // Create issue for non trigger-based events.&#13;
    if (params.event_source !== '0'&#13;
        &amp;&amp; params.event_value !== '0') {&#13;
        Redmine.createIssue(params.alert_subject, params.alert_message, priority);&#13;
    }&#13;
    // Create issue for trigger-based events.&#13;
    else if (params.event_value === '1' &amp;&amp; params_update.status === '0') {&#13;
        var issue_id = Redmine.createIssue(params.alert_subject,&#13;
            params.alert_subject + '\n' + params.alert_message + '\n' +&#13;
            params.zabbix_url + (params.zabbix_url.endsWith('/') ? '' : '/') +&#13;
            'tr_events.php?triggerid=' + params.trigger_id + '&amp;eventid=' + params.event_id + '\n',&#13;
            priority,&#13;
            params_fields);&#13;
&#13;
        result.tags.__zbx_redmine_issue_id = issue_id;&#13;
        result.tags.__zbx_redmine_issuelink = params.redmine_url +&#13;
            (params.redmine_url.endsWith('/') ? '' : '/') + 'issues/' + issue_id;&#13;
    }&#13;
    // Update created issue for trigger-based event.&#13;
    else {&#13;
        Redmine.updateIssue(params.alert_subject + '\n' + params.alert_message, params_fields);&#13;
    }&#13;
&#13;
    return JSON.stringify(result);&#13;
}&#13;
catch (error) {&#13;
    Zabbix.Log(3, '[ Redmine Webhook ] ERROR: ' + error);&#13;
    throw 'Sending failed: ' + error;&#13;
}</script>
            <process_tags>YES</process_tags>
            <show_event_menu>YES</show_event_menu>
            <event_menu_url>{EVENT.TAGS.__zbx_redmine_issuelink}</event_menu_url>
            <event_menu_name>Redmine: issue #{EVENT.TAGS.__zbx_redmine_issue_id}</event_menu_name>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Problem: {EVENT.NAME}</subject>
                    <message>Problem started at {EVENT.TIME} on {EVENT.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Operational data: {EVENT.OPDATA}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>Resolved: {EVENT.NAME}</subject>
                    <message>Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>Updated problem: {EVENT.NAME}</subject>
                    <message>{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&#13;
{EVENT.UPDATE.MESSAGE}&#13;
&#13;
Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery rule: {DISCOVERY.RULE.NAME}&#13;
&#13;
Device IP: {DISCOVERY.DEVICE.IPADDRESS}&#13;
Device DNS: {DISCOVERY.DEVICE.DNS}&#13;
Device status: {DISCOVERY.DEVICE.STATUS}&#13;
Device uptime: {DISCOVERY.DEVICE.UPTIME}&#13;
&#13;
Device service name: {DISCOVERY.SERVICE.NAME}&#13;
Device service port: {DISCOVERY.SERVICE.PORT}&#13;
Device service status: {DISCOVERY.SERVICE.STATUS}&#13;
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Host name: {HOST.HOST}&#13;
Host IP: {HOST.IP}&#13;
Agent port: {HOST.PORT}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
