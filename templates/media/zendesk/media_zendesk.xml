<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2020-04-20T00:00:00Z</date>
    <media_types>
        <media_type>
            <name>Zendesk</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>alert_message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>alert_subject</name>
                    <value>{ALERT.SUBJECT}</value>
                </parameter>
                <parameter>
                    <name>event_id</name>
                    <value>{EVENT.ID}</value>
                </parameter>
                <parameter>
                    <name>event_nseverity</name>
                    <value>{EVENT.NSEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_source</name>
                    <value>{EVENT.SOURCE}</value>
                </parameter>
                <parameter>
                    <name>event_tags</name>
                    <value>{EVENT.TAGS}</value>
                </parameter>
                <parameter>
                    <name>event_update_status</name>
                    <value>{EVENT.UPDATE.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_value</name>
                    <value>{EVENT.VALUE}</value>
                </parameter>
                <parameter>
                    <name>severity_average</name>
                    <value>normal</value>
                </parameter>
                <parameter>
                    <name>severity_default</name>
                    <value>-</value>
                </parameter>
                <parameter>
                    <name>severity_disaster</name>
                    <value>urgent</value>
                </parameter>
                <parameter>
                    <name>severity_high</name>
                    <value>high</value>
                </parameter>
                <parameter>
                    <name>severity_information</name>
                    <value>low</value>
                </parameter>
                <parameter>
                    <name>severity_not_classified</name>
                    <value>low</value>
                </parameter>
                <parameter>
                    <name>severity_warning</name>
                    <value>normal</value>
                </parameter>
                <parameter>
                    <name>trigger_id</name>
                    <value>{TRIGGER.ID}</value>
                </parameter>
                <parameter>
                    <name>zbxurl</name>
                    <value>{$ZABBIX.URL}</value>
                </parameter>
                <parameter>
                    <name>zendesk_issue_key</name>
                    <value>{EVENT.TAGS.__zbx_zdk_issuekey}</value>
                </parameter>
                <parameter>
                    <name>zendesk_token</name>
                    <value>&lt;put your {enduser_email_address}/token:{api_token}&gt;</value>
                </parameter>
                <parameter>
                    <name>zendesk_type</name>
                    <value>incident</value>
                </parameter>
                <parameter>
                    <name>zendesk_url</name>
                    <value>&lt;put your Zendesk URL&gt;</value>
                </parameter>
            </parameters>
            <script>var Zendesk = {&#13;
    params: {},&#13;
&#13;
    setParams: function (params) {&#13;
        if (typeof params !== 'object') {&#13;
            return;&#13;
        }&#13;
&#13;
        Zendesk.params = params;&#13;
        if (typeof Zendesk.params.url === 'string') {&#13;
            if (!Zendesk.params.url.endsWith('/')) {&#13;
                Zendesk.params.url += '/';&#13;
            }&#13;
            Zendesk.params.url += 'api/v2/';&#13;
        }&#13;
    },&#13;
&#13;
    addCustomFields: function (data, fields) {&#13;
        if (typeof fields === 'object' &amp;&amp; Object.keys(fields).length) {&#13;
            var schema = Zendesk.getSchema(),&#13;
                arr = [],&#13;
                i,&#13;
                n;&#13;
&#13;
            if (schema) {&#13;
                Object.keys(fields)&#13;
                    .forEach(function(field) {&#13;
                        for (i = 0, n = schema.ticket_fields.length; i &lt; n; i++) {&#13;
                            if (schema.ticket_fields[i].id == field&#13;
                                &amp;&amp; ['text', 'integer', 'date'].indexOf(schema.ticket_fields[i].type) !== -1){&#13;
&#13;
                                switch (schema.ticket_fields[i].type) {&#13;
                                    case 'integer':&#13;
                                        fields[field] = parseInt(fields[field]);&#13;
                                        break;&#13;
                                    case 'date':&#13;
                                        if (fields[field].match(/^\d{4}[.-]\d{2}[.-]\d{2}$/) !== null) {&#13;
                                            fields[field] = fields[field].replace(/\./g, '-');&#13;
                                        }&#13;
                                        else {&#13;
                                            fields[field] = '';&#13;
                                        }&#13;
                                        break;&#13;
                                }&#13;
&#13;
                                arr.push({id: field, value: fields[field]});&#13;
                                break;&#13;
                            }&#13;
                        }&#13;
                    });&#13;
&#13;
                if (arr.length) {&#13;
                    data.ticket['custom_fields'] = arr;&#13;
                }&#13;
            }&#13;
            else {&#13;
                Zabbix.Log(4, '[Zendesk Webhook] Failed to retrieve field schema.');&#13;
            }&#13;
        }&#13;
&#13;
        return data;&#13;
    },&#13;
&#13;
    request: function (method, query, data) {&#13;
        ['url', 'token', 'type'].forEach(function (field) {&#13;
            if (typeof Zendesk.params !== 'object' || typeof Zendesk.params[field] === 'undefined') {&#13;
                throw 'Required Zendesk param is not set: ' + field + '\n' + Zendesk.params[field];&#13;
            }&#13;
        });&#13;
&#13;
        var response,&#13;
            url = Zendesk.params.url + query,&#13;
            request = new CurlHttpRequest();&#13;
&#13;
        if (typeof Zendesk.HTTPProxy === 'string' &amp;&amp; Zendesk.HTTPProxy.trim() !== '') {&#13;
            request.SetProxy(Zendesk.HTTPProxy);&#13;
        }&#13;
&#13;
        request.AddHeader('Content-Type: application/json');&#13;
        request.AddHeader('Authorization: Basic ' + btoa(Zendesk.params.token));&#13;
&#13;
        if (typeof data !== 'undefined') {&#13;
            data = JSON.stringify(data);&#13;
        }&#13;
&#13;
        Zabbix.Log(4, '[Zendesk Webhook] Sending request: ' + url + ((typeof data === 'string') ? (' ' + data) : ''));&#13;
&#13;
        switch (method) {&#13;
            case 'get':&#13;
                response = request.Get(url, data);&#13;
                break;&#13;
&#13;
            case 'post':&#13;
                response = request.Post(url, data);&#13;
                break;&#13;
&#13;
            case 'put':&#13;
                response = request.Put(url, data);&#13;
                break;&#13;
&#13;
            default:&#13;
                throw 'Unsupported HTTP request method: ' + method;&#13;
        }&#13;
&#13;
        Zabbix.Log(4, '[Zendesk Webhook] Received response with status code ' + request.Status() + '. ' + response);&#13;
&#13;
        if (response !== null) {&#13;
            try {&#13;
                response = JSON.parse(response);&#13;
            }&#13;
            catch (error) {&#13;
                Zabbix.Log(4, '[Zendesk Webhook] Failed to parse response received from Zendesk.');&#13;
            }&#13;
        }&#13;
&#13;
        if (request.Status() &lt; 200 || request.Status() &gt;= 300) {&#13;
            var message = 'Request failed with status code ' + request.Status();&#13;
&#13;
            if (response !== null &amp;&amp; typeof response.error !== 'undefined'&#13;
                &amp;&amp; Object.keys(response.error).length &gt; 0) {&#13;
                message += ': ' + JSON.stringify(response.error);&#13;
            }&#13;
            else if (response !== null &amp;&amp; typeof response.description !== 'undefined'&#13;
                &amp;&amp; Object.keys(response.description).length &gt; 0) {&#13;
                message += ': ' + JSON.stringify(response.description);&#13;
            }&#13;
            else {&#13;
                message += '. ' + response;&#13;
            }&#13;
            throw message + '. Check debug log for more information.';&#13;
        }&#13;
&#13;
        return {&#13;
            status: request.Status(),&#13;
            response: response&#13;
        };&#13;
    },&#13;
&#13;
    getSchema: function() {&#13;
        var result = Zendesk.request('get', 'ticket_fields.json');&#13;
&#13;
        return result.response;&#13;
    },&#13;
&#13;
    createIssue: function(data, fields) {&#13;
        var result = Zendesk.request('post', 'tickets.json', Zendesk.addCustomFields(data, fields));&#13;
&#13;
        if (typeof result.response !== 'object' || typeof result.response.ticket.id === 'undefined'&#13;
            || result.status != 201) {&#13;
            throw 'Cannot create Zendesk issue. Check debug log for more information.';&#13;
        }&#13;
&#13;
        return result.response.ticket.id;&#13;
    },&#13;
&#13;
    updateIssue: function(data, fields) {&#13;
        Zendesk.request('put', 'tickets/' + Zendesk.params.issue_key + '.json', Zendesk.addCustomFields(data, fields));&#13;
    }&#13;
};&#13;
&#13;
try {&#13;
    var params = JSON.parse(value),&#13;
        fields = {},&#13;
        zendesk = {},&#13;
        update = {},&#13;
        data = {},&#13;
        result = {tags: {}},&#13;
        required_params = [&#13;
            'alert_subject',&#13;
            'alert_message',&#13;
            'event_id',&#13;
            'event_source',&#13;
            'event_value',&#13;
            'event_update_status'&#13;
        ],&#13;
        severities = [&#13;
            {name: 'not_classified', color: '#97AAB3'},&#13;
            {name: 'information', color: '#7499FF'},&#13;
            {name: 'warning', color: '#FFC859'},&#13;
            {name: 'average', color: '#FFA059'},&#13;
            {name: 'high', color: '#E97659'},&#13;
            {name: 'disaster', color: '#E45959'},&#13;
            {name: 'resolved', color: '#009900'},&#13;
            {name: 'default', color: '#000000'}&#13;
        ],&#13;
        priority;&#13;
&#13;
    Object.keys(params)&#13;
        .forEach(function (key) {&#13;
            if (key.startsWith('zendesk_')) {&#13;
                zendesk[key.substring(8)] = params[key];&#13;
            }&#13;
            else if (key.startsWith('customfield_')) {&#13;
                fields[key.substring(12)] = params[key];&#13;
            }&#13;
            else if (key.startsWith('event_update_')) {&#13;
                update[key.substring(13)] = params[key];&#13;
            }&#13;
            else if (required_params.indexOf(key) !== -1 &amp;&amp; params[key].trim() === '') {&#13;
                throw 'Parameter ' + key + ' cannot be empty.';&#13;
            }&#13;
        });&#13;
&#13;
    // Possible values: question, incident, problems, task&#13;
    if (['question', 'incident', 'problem', 'task'].indexOf(params.zendesk_type) === -1) {&#13;
        throw 'Incorrect &quot;zendesk_type&quot; parameter given: ' + params.zendesk_type +&#13;
            '\nMust be one of question, incident, problem, task.';&#13;
    }&#13;
&#13;
    // Possible values: 0 - Trigger, 1 - Discovery, 2 - Autoregistration, 3 - Internal.&#13;
    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&#13;
        throw 'Incorrect &quot;event_source&quot; parameter given: ' + params.event_source + '\nMust be 0-3.';&#13;
    }&#13;
&#13;
    // Check {EVENT.VALUE} for trigger-based and internal events.&#13;
    // Possible values: 1 for problem, 0 for recovering&#13;
    if (params.event_value !== '0' &amp;&amp; params.event_value !== '1'&#13;
        &amp;&amp; (params.event_source === '0' || params.event_source === '3')) {&#13;
        throw 'Incorrect &quot;event_value&quot; parameter given: ' + params.event_value + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&#13;
    // Possible values: 0 - Webhook was called because of problem/recovery event, 1 - Update operation.&#13;
    if (params.event_source === '0' &amp;&amp; params.event_update_status !== '0' &amp;&amp; params.event_update_status !== '1') {&#13;
        throw 'Incorrect &quot;event_update_status&quot; parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    if (params.event_source !== '0' &amp;&amp; params.event_value === '0') {&#13;
        throw 'Recovery operations are supported only for trigger-based actions.';&#13;
    }&#13;
&#13;
    // Zendesk_issue_key must be a positive integer if an update action is being performed.&#13;
    if (params.event_source === '0' &amp;&amp; ((params.event_value === '1' &amp;&amp; params.event_update_status === '1')&#13;
        || (params.event_value === '0' &amp;&amp; (params.event_update_status === '0' || params.event_update_status === '1')))&#13;
        &amp;&amp; (isNaN(parseInt(params.zendesk_issue_key)) || parseInt(params.zendesk_issue_key) &lt; 1 )) {&#13;
        throw 'Incorrect &quot;zendesk_issue_key&quot; parameter given: ' + params.zendesk_issue_key +&#13;
            '\nMust be positive integer.';&#13;
    }&#13;
&#13;
    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&#13;
        params.event_nseverity = '7';&#13;
    }&#13;
&#13;
    if (params.event_value === '0') {&#13;
        params.event_nseverity = '6';&#13;
    }&#13;
&#13;
    priority = params['severity_' + severities[params.event_nseverity].name] || severities[7].name;&#13;
&#13;
    Zendesk.setParams(zendesk);&#13;
    Zendesk.HTTPProxy = params.HTTPProxy;&#13;
&#13;
    // Create issue for non trigger-based events.&#13;
    if (params.event_source !== '0' &amp;&amp; params.event_value !== '0') {&#13;
        data = {&#13;
            ticket: {&#13;
                external_id: params.event_id,&#13;
                type: Zendesk.params.type,&#13;
                status: 'new',&#13;
                subject: params.alert_subject,&#13;
                comment: {&#13;
                    body: params.alert_message,&#13;
                    public: 'false'&#13;
                },&#13;
                priority: priority,&#13;
                tags: params.event_tags&#13;
            }&#13;
        };&#13;
&#13;
        Zendesk.createIssue(data, fields);&#13;
    }&#13;
    // Create issue for trigger-based events.&#13;
    else if (params.event_value === '1' &amp;&amp; update.status === '0') {&#13;
        data = {&#13;
            ticket: {&#13;
                external_id: params.event_id,&#13;
                type: Zendesk.params.type,&#13;
                status: 'new',&#13;
                subject: params.alert_subject,&#13;
                comment: {&#13;
                    body: params.zbxurl + (params.zbxurl.endsWith('/') ? '' : '/') + 'tr_events.php?triggerid=' +&#13;
                        params.trigger_id + '&amp;eventid=' + params.event_id + '\n' + params.alert_message,&#13;
                    public: 'false'&#13;
                },&#13;
                priority: priority,&#13;
                tags: params.event_tags&#13;
            }&#13;
        };&#13;
        var key = Zendesk.createIssue(data, fields);&#13;
&#13;
        result.tags.__zbx_zdk_issuekey = key;&#13;
        result.tags.__zbx_zdk_issuelink = params.zendesk_url +&#13;
            (params.zendesk_url.endsWith('/') ? '' : '/') + 'agent/tickets/' + key;&#13;
    }&#13;
    // Update created issue for trigger-based event.&#13;
    else {&#13;
        data = {&#13;
            ticket: {&#13;
                type: Zendesk.params.type,&#13;
                subject: params.alert_subject,&#13;
                comment: {&#13;
                    body: params.alert_message,&#13;
                    public: 'false'&#13;
                }&#13;
            }&#13;
        };&#13;
&#13;
        Zendesk.updateIssue(data, fields);&#13;
    }&#13;
&#13;
    return JSON.stringify(result);&#13;
}&#13;
catch (error) {&#13;
    Zabbix.Log(3, '[Zendesk Webhook] ERROR: ' + error);&#13;
    throw 'Sending failed: ' + error;&#13;
}</script>
            <process_tags>YES</process_tags>
            <show_event_menu>YES</show_event_menu>
            <event_menu_url>{EVENT.TAGS.__zbx_zdk_issuelink}</event_menu_url>
            <event_menu_name>Zendesk: {EVENT.TAGS.__zbx_zdk_issuekey}</event_menu_name>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>{EVENT.NAME}</subject>
                    <message>Problem started at {EVENT.TIME} on {EVENT.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Operational data: {EVENT.OPDATA}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>{EVENT.NAME}</subject>
                    <message>Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Operational data: {EVENT.OPDATA}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>{EVENT.NAME}</subject>
                    <message>{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&#13;
{EVENT.UPDATE.MESSAGE}&#13;
&#13;
Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery rule: {DISCOVERY.RULE.NAME}&#13;
&#13;
Device IP: {DISCOVERY.DEVICE.IPADDRESS}&#13;
Device DNS: {DISCOVERY.DEVICE.DNS}&#13;
Device status: {DISCOVERY.DEVICE.STATUS}&#13;
Device uptime: {DISCOVERY.DEVICE.UPTIME}&#13;
&#13;
Device service name: {DISCOVERY.SERVICE.NAME}&#13;
Device service port: {DISCOVERY.SERVICE.PORT}&#13;
Device service status: {DISCOVERY.SERVICE.STATUS}&#13;
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Host name: {HOST.HOST}&#13;
Host IP: {HOST.IP}&#13;
Agent port: {HOST.PORT}</message>
                </message_template>
                <message_template>
                    <event_source>INTERNAL</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Internal problem: {EVENT.NAME}</subject>
                    <message>Internal problem started at {EVENT.TIME} on {EVENT.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Operational data: {EVENT.OPDATA}&#13;
Original problem ID: {EVENT.ID}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
