--
-- Zabbix
-- Copyright (C) 2001-2020 Zabbix SIA
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 2 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
--

TABLE |users
FIELDS|userid|alias|name  |surname      |passwd                                                      |url |autologin|autologout|lang |refresh|type|theme  |rows_per_page|
ROW   |1     |Admin|Zabbix|Administrator|$2y$10$92nDno4n0Zm7Ej7Jfsz8WukBfgSS/U0QkIuu8WkJPihXBb2A1UrEK|    |1        |0         |en_GB|30s    |3   |default|50           |
ROW   |2     |guest|      |             |$2y$10$89otZrRNmde97rIyzclecuk6LwKAsHN0BcvoOKGjbT.BwMBfm7G06|    |0        |15m       |en_GB|30s    |1   |default|50           |

TABLE |hstgrp
FIELDS|groupid|name                       |internal|flags|
ROW   |1      |Templates                  |0       |0    |
ROW   |2      |Linux servers              |0       |0    |
ROW   |4      |Zabbix servers             |0       |0    |
ROW   |5      |Discovered hosts           |1       |0    |
ROW   |6      |Virtual machines           |0       |0    |
ROW   |7      |Hypervisors                |0       |0    |
ROW   |8      |Templates/Modules          |0       |0    |
ROW   |9      |Templates/Network devices  |0       |0    |
ROW   |10     |Templates/Operating systems|0       |0    |
ROW   |11     |Templates/Server hardware  |0       |0    |
ROW   |12     |Templates/Applications     |0       |0    |
ROW   |13     |Templates/Databases        |0       |0    |
ROW   |14     |Templates/Virtualization   |0       |0    |

TABLE |drules
FIELDS|druleid|proxy_hostid|name         |iprange        |delay|status|
ROW   |2      |NULL        |Local network|192.168.0.1-254|1h   |1     |

TABLE |dchecks
FIELDS|dcheckid|druleid|type|key_        |snmp_community|ports|snmpv3_securityname|snmpv3_securitylevel|snmpv3_authpassphrase|snmpv3_privpassphrase|uniq|snmpv3_authprotocol|snmpv3_privprotocol|snmpv3_contextname|host_source|name_source|
ROW   |2       |2      |9   |system.uname|              |10050|                   |0                   |                     |                     |0   |0                  |0                  |                  |1          |0          |

TABLE |media_type
FIELDS|mediatypeid|type|name                  |smtp_server     |smtp_helo  |smtp_email        |exec_path|gsm_modem |username|passwd|status|smtp_port|smtp_security|smtp_verify_peer|smtp_verify_host|smtp_authentication|exec_params|maxsessions|maxattempts|attempt_interval|content_type|script                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |timeout|process_tags|show_event_menu|event_menu_url                        |event_menu_name                                           |description|
ROW   |1          |0   |Email                 |mail.example.com|example.com|zabbix@example.com|         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |0           ||30s    |0           |0              |                                      |                                                          ||
ROW   |3          |2   |SMS                   |                |           |                  |         |/dev/ttyS0|        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           ||30s    |0           |0              |                                      |                                                          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |4          |0   |Email (HTML)          |mail.example.com|example.com|zabbix@example.com|         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           ||30s    |0           |0              |                                      |                                                          ||
ROW   |5          |4   |Mattermost            |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |1          |10s             |1           |var SEVERITY_COLORS = [&eol;    '#97AAB3', '#7499FF', '#FFC859',&eol;    '#FFA059', '#E97659', '#E45959'&eol;];&eol;&eol;var RESOLVE_COLOR = '#009900';&eol;&eol;var SEND_MODE_HANDLERS = {&eol;    alarm: handlerAlarm,&eol;    event: handlerEvent&eol;};&eol;&eol;var EVENT_STATUS = {&eol;    PROBLEM: 'PROBLEM',&eol;    UPDATE: 'UPDATE',&eol;    RESOLVE: 'OK'&eol;};&eol;&eol;if (!String.prototype.format) {&eol;    String.prototype.format = function() {&eol;        var args = arguments;&eol;&eol;        return this.replace(/{(\d+)}/g, function(match, number) {&eol;            return number in args&eol;                ? args[number]&eol;                : match&eol;            ;&eol;        });&eol;    };&eol;}&eol;&eol;function isEventProblem(params) {&eol;    return params.event_value == 1&eol;        && params.event_update_status == 0&eol;    ;&eol;}&eol;&eol;function isEventUpdate(params) {&eol;    return params.event_value == 1&eol;        && params.event_update_status == 1&eol;    ;&eol;}&eol;&eol;function isEventResolve(params) {&eol;    return params.event_value == 0;&eol;}&eol;&eol;function getPermalink(mattermost_url, team_name, postid) {&eol;    return '{0}/{1}/pl/{2}'.format(&eol;        mattermost_url.replace(/\/+$/, ''),&eol;        team_name,&eol;        postid&eol;    );&eol;}&eol;&eol;function getChannel(send_to) {&eol;    switch (true) {&eol;        case /.+\/#.+/.test(send_to):&eol;            return getChannelByName(send_to);&eol;&eol;        case /@.+/.test(send_to):&eol;            return getDirectChannel(send_to);&eol;&eol;        default:&eol;            return getChannelByID(send_to);&eol;    }&eol;}&eol;&eol;function getChannelByName(send_to) {&eol;    var team_chan = send_to&eol;        .trim()&eol;        .split('/#');&eol;&eol;    var resp = JSON.parse(req.Get(&eol;        Mattermost.channel_byname.format(team_chan[0], team_chan[1]),&eol;        JSON.stringify(fields)&eol;    )&eol;    );&eol;&eol;    if (req.Status() != 200) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    return resp;&eol;}&eol;&eol;function getDirectChannel(send_to) {&eol;    Zabbix.Log(5, '[ Mattermost Webhook ] Call {0}({1})'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(arguments)&eol;    ));&eol;&eol;    var teamUser = send_to&eol;            .trim()&eol;            .split('/@'),&eol;        bot = getBotUser(),&eol;        user = getUserByName(teamUser[1]);&eol;&eol;    var resp = JSON.parse(req.Post(&eol;        Mattermost.direct_channel,&eol;        JSON.stringify([bot.id, user.id])&eol;    )&eol;    );&eol;&eol;    Zabbix.Log(5, '[ Mattermost Webhook ] Result {0}: {1}'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(resp)&eol;    ));&eol;&eol;    if (req.Status() != 201) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    resp.team_name = teamUser[0];&eol;&eol;    return resp;&eol;}&eol;&eol;function getChannelByID(channelID) {&eol;    Zabbix.Log(5, '[ Mattermost Webhook ] Call {0}({1})'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(arguments)&eol;    ));&eol;&eol;    var resp = JSON.parse(req.Get(&eol;        Mattermost.get_channel.format(channelID),&eol;        JSON.stringify(fields)&eol;    )&eol;    );&eol;&eol;    Zabbix.Log(5, '[ Mattermost Webhook ] Result {0}: {1}'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(resp)&eol;    ));&eol;&eol;    if (req.Status() != 200) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    return resp;&eol;}&eol;&eol;function getBotUser() {&eol;    Zabbix.Log(5, '[ Mattermost Webhook ] Call {0}({1})'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(arguments)&eol;    ));&eol;&eol;    var resp = JSON.parse(req.Get(&eol;        Mattermost.bot_user,&eol;        JSON.stringify(fields)&eol;    )&eol;    );&eol;&eol;    Zabbix.Log(5, '[ Mattermost Webhook ] Result {0}: {1}'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(resp)&eol;    ));&eol;&eol;    if (req.Status() != 200) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    return resp;&eol;}&eol;&eol;function getUserByName(userName) {&eol;    Zabbix.Log(5, '[ Mattermost Webhook ] Call {0}({1})'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(arguments)&eol;    ));&eol;&eol;    var resp = JSON.parse(req.Get(&eol;        Mattermost.format(userName),&eol;        JSON.stringify(fields)&eol;    )&eol;    );&eol;&eol;    Zabbix.Log(5, '[ Mattermost Webhook ] Result {0}: {1}'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(resp)&eol;    ));&eol;&eol;    if (req.Status() != 200) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    return resp;&eol;}&eol;&eol;function getTeamByID(teamID) {&eol;    Zabbix.Log(5, '[ Mattermost Webhook ] Call {0}({1})'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(arguments)&eol;    ));&eol;&eol;    var resp = JSON.parse(req.Get(&eol;        Mattermost.get_team.format(teamID),&eol;        JSON.stringify(fields)&eol;    )&eol;    );&eol;&eol;    Zabbix.Log(5, '[ Mattermost Webhook ] Result {0}: {1}'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(resp)&eol;    ));&eol;&eol;    if (req.Status() != 200) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    return resp;&eol;}&eol;&eol;function createProblemURL(zabbix_url, triggerid, eventid) {&eol;    var problem_url = '{0}/tr_events.php?triggerid{1}&eventid={2}'&eol;        .format(&eol;            zabbix_url,&eol;            triggerid,&eol;            eventid&eol;        );&eol;&eol;    return problem_url;&eol;}&eol;&eol;function getTagValue(event_tags, key) {&eol;    var pattern = new RegExp('(' + key + ':.+)');&eol;    var tagValue = event_tags&eol;        .split(',')&eol;        .filter(function (v) {&eol;            return v.match(pattern);&eol;        })&eol;        .map(function (v) {&eol;            return v.split(':')[1];&eol;        })[0]&eol;        &pipe;&pipe; 0;&eol;&eol;    return tagValue;&eol;}&eol;&eol;function handlerAlarm(req, params) {&eol;    var channel = getChannel(params.send_to);&eol;    var fields = {&eol;        channel_id: channel.id,&eol;        props: {}&eol;    };&eol;&eol;    if (isEventProblem(params)) {&eol;        var team_name = channel.team_name&eol;            ? channel.team_name&eol;            : getTeamByID(channel.team_id).name;&eol;&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.PROBLEM,&eol;                SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;                params.event_date,&eol;                params.event_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&eol;            )&eol;        ];&eol;&eol;        var resp = JSON.parse(req.Post(&eol;            Mattermost.post_message,&eol;            JSON.stringify(fields)&eol;        )&eol;        );&eol;&eol;        if (req.Status() != 201) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;&eol;        result.tags.__mattermost_post_id = resp.id;&eol;        result.tags.__mattermost_channel_id = channel.id;&eol;        result.tags.__mattermost_channel_name = channel.name;&eol;        result.tags.__mattermost_message_link = getPermalink(&eol;            params.mattermost_url,&eol;            team_name,&eol;            resp.id&eol;        );&eol;&eol;    }&eol;    else if (isEventUpdate(params)) {&eol;        fields.root_id = getTagValue(params.event_tags, 'mattermost_post_id');&eol;        fields.message = params.event_update_message &pipe;&pipe; '';&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.UPDATE,&eol;                SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;                params.event_update_date,&eol;                params.event_update_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id),&eol;                true&eol;            )&eol;        ];&eol;&eol;        resp = JSON.parse(req.Post(&eol;            Mattermost.post_message, JSON.stringify(fields)&eol;        )&eol;        );&eol;&eol;        if (req.Status() != 201) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;&eol;    }&eol;    else if (isEventResolve(params)) {&eol;        fields.channel_id = getTagValue(params.event_tags, 'mattermost_channel_id');&eol;        fields.id = getTagValue(params.event_tags, 'mattermost_post_id');&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.RESOLVE,&eol;                RESOLVE_COLOR,&eol;                params.event_date,&eol;                params.event_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&eol;            )&eol;        ];&eol;&eol;        var post_id = getTagValue(params.event_tags, 'mattermost_post_id');&eol;&eol;        resp = JSON.parse(req.Put(&eol;            Mattermost.chat_update.format(post_id),&eol;            JSON.stringify(fields)&eol;        )&eol;        );&eol;&eol;        if (req.Status() != 200) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;    }&eol;}&eol;&eol;function handlerEvent(req, params) {&eol;    var channel = getChannel(params.send_to);&eol;    var fields = {&eol;        channel_id: channel.id,&eol;        props: {}&eol;    };&eol;&eol;    if (isEventProblem(params)) {&eol;        var team_name = channel.team_name&eol;            ? channel.team_name&eol;            : getTeamByID(channel.team_id).name;&eol;&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.PROBLEM,&eol;                SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;                params.event_date,&eol;                params.event_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&eol;            )&eol;        ];&eol;&eol;        var resp = JSON.parse(req.Post(Mattermost.post_message, JSON.stringify(fields)));&eol;&eol;        if (req.Status() != 201) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;&eol;        result.tags.__mattermost_channel_name = channel.name;&eol;        result.tags.__mattermost_message_link = getPermalink(&eol;            params.mattermost_url,&eol;            team_name,&eol;            resp.id&eol;        );&eol;&eol;    }&eol;    else if (isEventUpdate(params)) {&eol;        fields.message = params.event_update_message &pipe;&pipe; '';&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.UPDATE,&eol;                SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;                params.event_update_date,&eol;                params.event_update_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id),&eol;                false&eol;            )&eol;        ];&eol;&eol;        resp = JSON.parse(req.Post(Mattermost.post_message, JSON.stringify(fields)));&eol;&eol;        if (req.Status() != 201) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;&eol;    }&eol;    else if (isEventResolve(params)) {&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.RESOLVE,&eol;                RESOLVE_COLOR,&eol;                params.event_recovery_date,&eol;                params.event_recovery_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&eol;            )&eol;        ];&eol;&eol;        resp = JSON.parse(req.Post(Mattermost.post_message, JSON.stringify(fields)));&eol;&eol;        if (req.Status() != 201) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;    }&eol;}&eol;&eol;function createMessage(&eol;    status,&eol;    event_severity_color,&eol;    event_date,&eol;    event_time,&eol;    problem_url,&eol;    isShort&eol;) {&eol;    var message = {&eol;        fallbac: '{0} #{1}: {2}'.format(status, params.event_id, params.event_name),&eol;        title: '{0} #{1}: {2}'.format(status, params.event_id, params.event_name),&eol;        color: event_severity_color,&eol;        title_link: problem_url,&eol;        footer: problem_url,&eol;&eol;        fields: [&eol;            {&eol;                title: 'Host',&eol;                value: '{0} [{1}]'.format(params.host_name, params.host_ip),&eol;                short: true&eol;            },&eol;            {&eol;                title: 'Event time',&eol;                value: '{0} {1}'.format(event_date, event_time),&eol;                short: true&eol;            },&eol;            {&eol;                title: 'Severity',&eol;                value: params.event_severity,&eol;                short: true&eol;            },&eol;            {&eol;                title: 'Opdata',&eol;                value: params.event_opdata,&eol;                short: true&eol;            }&eol;        ],&eol;    };&eol;&eol;    if (!isShort) {&eol;        message.fields.push(&eol;            {&eol;                title: 'Event tags',&eol;                value: '`{0}`'.format(params.event_tags.replace(/__.+?:(.+?,&pipe;.+)/g, '') &pipe;&pipe; 'None'),&eol;                short: true&eol;            },&eol;            {&eol;                title: 'Trigger description',&eol;                value: params.trigger_description,&eol;                short: true&eol;            }&eol;        );&eol;    }&eol;&eol;    return message;&eol;}&eol;&eol;function validateParams(params) {&eol;    if (typeof params.bot_token !== 'string' &pipe;&pipe; params.bot_token.trim() === '') {&eol;        throw 'Field "bot_token" cannot be empty';&eol;    }&eol;&eol;    if (isNaN(params.event_id)) {&eol;        throw 'Field "event_id" is not a number';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        throw 'Incorrect "event_nseverity" parameter given: ' + params.event_nseverity + '\nMust be 0-5.';&eol;    }&eol;&eol;    if (typeof params.event_severity !== 'string' &pipe;&pipe; params.event_severity.trim() === '') {&eol;        throw 'Field "event_severity" cannot be empty';&eol;    }&eol;&eol;    if (params.event_update_status !== '0' && params.event_update_status !== '1') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_value !== '0' && params.event_value !== '1') {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (typeof params.host_ip !== 'string' &pipe;&pipe; params.host_ip.trim() === '') {&eol;        throw 'Field "host_ip" cannot be empty';&eol;    }&eol;&eol;    if (typeof params.host_name !== 'string' &pipe;&pipe; params.host_name.trim() === '') {&eol;        throw 'Field "host_name" cannot be empty';&eol;    }&eol;&eol;    if (typeof params.mattermost_url !== 'string' &pipe;&pipe; params.mattermost_url.trim() === '') {&eol;        throw 'Field "mattermost_url" cannot be empty';&eol;    }&eol;&eol;    if (!/^(http&pipe;https):\/\/.+/.test(params.mattermost_url)) {&eol;        throw 'Field "mattermost_url" must contain a schema';&eol;    }&eol;&eol;    if (['alarm', 'event'].indexOf(params.send_mode) === -1) {&eol;        throw 'Incorrect "send_mode" parameter given: ' + params.send_mode + '\nMust be "alarm" or "event".';&eol;    }&eol;&eol;    if (typeof params.send_to !== 'string' &pipe;&pipe; params.send_to.trim() === '') {&eol;        throw 'Field "send_to" cannot be empty';&eol;    }&eol;&eol;    if (isNaN(params.trigger_id)) {&eol;        throw 'field "trigger_id" is not a number';&eol;    }&eol;&eol;    if (typeof params.zabbix_url !== 'string' &pipe;&pipe; params.zabbix_url.trim() === '') {&eol;        throw 'Field "zabbix_url" cannot be empty';&eol;    }&eol;&eol;    if (!/^(http&pipe;https):\/\/.+/.test(params.zabbix_url)) {&eol;        throw 'Field "zabbix_url" must contain a schema';&eol;    }&eol;&eol;}&eol;&eol;try {&eol;    var params = JSON.parse(value);&eol;&eol;    validateParams(params);&eol;&eol;    var req = new CurlHttpRequest(),&eol;        fields = {},&eol;        result = {tags: {}};&eol;&eol;    if (typeof params.HTTPProxy === 'string' && params.HTTPProxy.trim() !== '') {&eol;        req.SetProxy(params.HTTPProxy);&eol;    }&eol;&eol;    req.AddHeader('Content-Type: application/json; charset=utf-8');&eol;    req.AddHeader('Authorization: Bearer ' + params.bot_token);&eol;&eol;    params.mattermost_url = params.mattermost_url.replace(/\/+$/, '');&eol;    params.zabbix_url = params.zabbix_url.replace(/\/+$/, '');&eol;&eol;    var APIEndpoint = params.mattermost_url + '/api/v4/';&eol;&eol;    var Mattermost = {&eol;        post_message: APIEndpoint + 'posts',&eol;        get_channel: APIEndpoint + 'channels/{0}',&eol;        get_team: APIEndpoint + 'teams/{0}',&eol;        chat_update: APIEndpoint + 'posts/{0}',&eol;        direct_channel: APIEndpoint + 'channels/direct',&eol;        channel_byname: APIEndpoint + 'teams/name/{0}/channels/name/{1}',&eol;        user_byname: APIEndpoint + 'users/username/{0}',&eol;        bot_user: APIEndpoint + 'users/me'&eol;&eol;    };&eol;&eol;    params.send_mode = params.send_mode.toLowerCase();&eol;    params.send_mode = params.send_mode in SEND_MODE_HANDLERS&eol;        ? params.send_mode&eol;        : 'alarm';&eol;&eol;    SEND_MODE_HANDLERS[params.send_mode](req, params);&eol;&eol;    return JSON.stringify(result);&eol;&eol;}&eol;catch (error) {&eol;    Zabbix.Log(4, '[ Mattermost Webhook ] Mattermost notification failed: ' + error);&eol;    throw 'Mattermost notification failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__mattermost_message_link}|Open in Mattermost: {EVENT.TAGS.__mattermost_channel_name}||
ROW   |6          |4   |Opsgenie              |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |try {&eol;    var result = {tags: {}},&eol;        params = JSON.parse(value),&eol;        req = new CurlHttpRequest(),&eol;        fields = {},&eol;        url = params.url,&eol;        severity;&eol;&eol;    if (typeof params.HTTPProxy === 'string' && params.HTTPProxy.trim() !== '') {&eol;        req.SetProxy(params.HTTPProxy);&eol;    }&eol;&eol;    req.AddHeader('Content-Type: application/json');&eol;    req.AddHeader('Authorization: GenieKey ' + params.token);&eol;&eol;    // Zabbix: 0 - Not classified, 1 - Information, 2 - Warning, 3 - Average, 4 - High, 5 - Disaster.&eol;    // Opsgenie: P5 Informational, P4 Low, P3 Moderate, P2 High, P1 Critical.&eol;    if ((params.severity == 0) &pipe;&pipe; (params.severity == 1))&eol;        severity = 'P5';&eol;    else if (params.severity == 2)&eol;        severity = 'P4';&eol;    else if (params.severity == 3)&eol;        severity = 'P3';&eol;    else if (params.severity == 4)&eol;        severity = 'P2';&eol;    else if (params.severity == 5)&eol;        severity = 'P1';&eol;&eol;    if ((params.eventvalue == 1) && (params.eventupdate == 0)) {&eol;        fields.message = params.subject;&eol;        fields.alias = params.eventid;&eol;        fields.description = params.message;&eol;        fields.details = {'Zabbix server': params.zbxurl, Problem: params.zbxurl +&eol;            '/tr_events.php?triggerid=' + params.triggerid + '&eventid=' + params.eventid};&eol;        fields.source = 'Zabbix';&eol;        fields.priority = severity;&eol;    }&eol;    else if ((params.eventvalue == 1) && (params.eventupdate == 1)) {&eol;        if (params.eventaction.includes('acknowledged'))&eol;            url = url + '/' + params.eventid + '/acknowledge?identifierType=alias' ;&eol;        else&eol;            url = url + '/' + params.eventid + '/notes?identifierType=alias';&eol;        fields.user = params.user;&eol;        fields.note = params.message;&eol;    }&eol;    else if (params.eventvalue == 0) {&eol;        url = url + '/' + params.eventid + '/close?identifierType=alias'&eol;        fields.note = params.message;&eol;    }&eol;&eol;    var resp = req.Post(url,&eol;        JSON.stringify(fields)&eol;    );&eol;&eol;    if (req.Status() != 202) {&eol;        throw JSON.parse(resp).message;&eol;    }&eol;&eol;    resp = JSON.parse(resp);&eol;&eol;    if ((params.eventvalue == 1) && (params.eventupdate == 0)) {&eol;        url = params.url + '/' + params.eventid + '?identifierType=alias';&eol;        resp = req.Get(url);&eol;        resp = JSON.parse(resp);&eol;        result.tags.opsgenie_issue_key = params.web + '/alert/detail/' + resp.data.id + '/details';&eol;    }&eol;&eol;}&eol;catch (error) {&eol;    Zabbix.Log(3, 'Opsgenie notification failed : ' + error);&eol;    throw 'Opsgenie notification failed : ' + error;&eol;&eol;}&eol;&eol;return JSON.stringify(result);|30s    |1           |1              |{EVENT.TAGS.opsgenie_issue_key}       |Alert in Opsgenie                                         |Please refer to https://docs.opsgenie.com/docs/alert-api and https://www.zabbix.com/documentation/current/manual/config/notifications/media/webhook#example_scripts.&eol;  &eol;Set global macro {$ZABBIX.URL} with your Zabbix server URL.&eol;Add dedicated user with media type "Opsgenie".&eol;Change the values of the variables url (https://api.opsgenie.com/v2/alerts or https://api.eu.opsgenie.com/v2/alerts),&eol;web (for example, https://myzabbix.app.opsgenie.com), token|
ROW   |7          |4   |PagerDuty             |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |try {&eol;&eol;    var params = JSON.parse(value),&eol;        req = new CurlHttpRequest(),&eol;        fields = {},&eol;        resp = '';&eol;&eol;    if (typeof params.HTTPProxy === 'string' && params.HTTPProxy.trim() !== '') {&eol;        req.SetProxy(params.HTTPProxy);&eol;    }&eol;&eol;    if (isNaN(parseInt(params.eventid)) &pipe;&pipe; params.eventid < 1) {&eol;        throw 'incorrect value for variable "eventid". The value must be a positive number.';&eol;    }&eol;    if (params.eventname.length < 1) {&eol;        throw 'incorrect value for variable "eventname". The value must be a non-empty string.';&eol;    }&eol;    if (params.hostname.length < 1) {&eol;        throw 'incorrect value for variable "eventname". The value must be a non-empty string.';&eol;    }&eol;    if (isNaN(parseInt(params.severity)) &pipe;&pipe; (params.severity < 0 && params.severity > 5)) {&eol;        throw 'incorrect value for variable "severity". The value must be a number 0..5.';&eol;    }&eol;    if (isNaN(parseInt(params.triggerid)) &pipe;&pipe; params.triggerid < 1) {&eol;        throw 'incorrect value for variable "triggerid". The value must be a positive number.';&eol;    }&eol;    if (params.eventack != 'Yes' && params.eventack != 'No') {&eol;        throw 'incorrect value for variable "eventack". The value must be Yes or No.';&eol;    }&eol;    if (isNaN(parseInt(params.eventupdate)) &pipe;&pipe; (params.eventupdate < 0 &pipe;&pipe; params.eventupdate > 1)) {&eol;        throw 'incorrect value for variable "eventupdate". The value must be 0 or 1.';&eol;    }&eol;    if (isNaN(parseInt(params.eventvalue)) &pipe;&pipe; (params.eventvalue < 0 &pipe;&pipe; params.eventvalue > 1)) {&eol;        throw 'incorrect value for variable "eventvalue". The value must be 0 or 1.';&eol;    }&eol;&eol;    // Correspondence between the PagerDuty and Zabbix severity level&eol;    var severityMapping = [&eol;        'info',    // Not classified&eol;        'info',    // Information&eol;        'warning', // Warning&eol;        'warning', // Average&eol;        'error',   // High&eol;        'critical' // Disaster&eol;    ];&eol;&eol;    req.AddHeader('Content-Type: application/json');&eol;&eol;    fields.routing_key = params.token;&eol;    fields.dedup_key = params.eventid;&eol;&eol;    if ((params.eventvalue == 1) && (params.eventupdate == 0)) {&eol;        fields.event_action = 'trigger';&eol;        fields.payload = {&eol;            summary: params.eventname,&eol;            source: params.hostname + ' : ' + params.hostip,&eol;            severity: severityMapping[params.severity],&eol;            custom_details: {&eol;                'Event date': params.eventdate,&eol;                'Event time': params.eventtime,&eol;                'Trigger description': params.triggerdesc,&eol;                'Trigger opdata': params.triggeropdata,&eol;                'Event tags': params.eventtags,&eol;                'Event host': params.hostname,&eol;                'Event host ip': params.hostip&eol;            }&eol;        };&eol;        fields.links = [{&eol;            href: params.url + '/tr_events.php?triggerid=' + params.triggerid + '&eventid=' + params.eventid,&eol;            text: 'Event link'&eol;        }];&eol;        fields.client = 'Zabbix';&eol;        fields.client_url = params.url;&eol;    }&eol;    else if ((params.eventvalue == 1) && (params.eventupdate == 1) && (params.eventack == 'Yes'))&eol;        fields.event_action = 'acknowledge';&eol;    else if (params.eventvalue == 0)&eol;        fields.event_action = 'resolve';&eol;    else&eol;        throw 'incorrect values. Update message without ack will not be sent.';&eol;&eol;    Zabbix.Log(4, '[PagerDuty Webhook] Sending request:' + JSON.stringify(fields));&eol;    resp = req.Post('https://events.pagerduty.com/v2/enqueue',&eol;        JSON.stringify(fields)&eol;    );&eol;    Zabbix.Log(4, '[PagerDuty Webhook] Receiving response:' + resp);&eol;&eol;    try {&eol;        resp = JSON.parse(resp);&eol;    }&eol;    catch (error) {&eol;        throw 'incorrect response. PagerDuty returned a non-JSON object.';&eol;    }&eol;&eol;    if (req.Status() != 202) {&eol;        if (typeof resp === 'object' && typeof resp.errors === 'object' && typeof resp.errors[0] === 'string') {&eol;            throw resp.errors[0];&eol;        }&eol;        else {&eol;            throw 'Unknown error.';&eol;        }&eol;    }&eol;&eol;    if (resp.status != 'success') {&eol;        throw 'Unknown error.';&eol;    }&eol;&eol;    return 'OK';&eol;}&eol;catch (error) {&eol;    Zabbix.Log(3, '[PagerDuty Webhook] Notification failed : ' + error);&eol;    throw 'PagerDuty notification failed : ' + error;&eol;}|30s    |0           |0              |                                      |                                                          |Please refer to https://v2.developer.pagerduty.com/docs/send-an-event-events-api-v2 and https://www.zabbix.com/documentation/current/manual/config/notifications/media/webhook#example_scripts.&eol;  &eol;Set global macro {$ZABBIX.URL} with your Zabbix server URL.&eol;Add a dedicated user with the media type "PagerDuty" and place the integration key in the "token" parameter to integrate into the service|
ROW   |8          |4   |Pushover              |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |0          |3          |10s             |1           |try {&eol;    var params = JSON.parse(value),&eol;        request = new CurlHttpRequest(),&eol;        data,&eol;        response;&eol;&eol;    if (typeof params.HTTPProxy === 'string' && params.HTTPProxy.trim() !== '') {&eol;        request.SetProxy(params.HTTPProxy);&eol;    }&eol;&eol;    if (isNaN(params.priority) &pipe;&pipe; params.priority < -2 &pipe;&pipe; params.priority > 2) {&eol;        throw 'field "priority" should be -2..2';&eol;    }&eol;&eol;    if (isNaN(params.triggerid)) {&eol;        throw 'field "triggerid" is not a number';&eol;    }&eol;&eol;    if (isNaN(params.eventid)) {&eol;        throw 'field "eventid" is not a number';&eol;    }&eol;&eol;    if (typeof params.message !== 'string' &pipe;&pipe; params.message.trim() === '') {&eol;        throw 'field "message" cannot be empty';&eol;    }&eol;&eol;    data = {&eol;        token: params.token,&eol;        user: params.user,&eol;        title: params.title,&eol;        message: params.message,&eol;        url: params.url + '/tr_events.php?triggerid=' + params.triggerid + '&eventid=' + params.eventid,&eol;        url_title: params.url_title,&eol;        priority: params.priority&eol;    };&eol;&eol;    if (params.priority == 2) {&eol;        if (isNaN(params.retry) &pipe;&pipe; params.retry < 30) {&eol;            throw 'field "retry" should be a number with value of at least 30 if "priority" is set to 2';&eol;        }&eol;&eol;        if (isNaN(params.expire) &pipe;&pipe; params.expire > 10800) {&eol;            throw 'field "expire" should be a number with value of at most 10800 if "priority" is set to 2';&eol;        }&eol;&eol;        data.retry = params.retry;&eol;        data.expire = params.expire;&eol;    }&eol;&eol;    data = JSON.stringify(data);&eol;    Zabbix.Log(4, '[ Pushover Webhook ] Sending request: ' + params.endpoint + '\n' + data);&eol;&eol;    request.AddHeader('Content-Type: application/json');&eol;    response = request.Post(params.endpoint, data);&eol;&eol;    Zabbix.Log(4, '[ Pushover Webhook ] Received response with status code ' + request.Status() + '\n' + response);&eol;&eol;    if (response !== null) {&eol;        try {&eol;            response = JSON.parse(response);&eol;        }&eol;        catch (error) {&eol;            Zabbix.Log(4, '[ Pushover Webhook ] Failed to parse response received from Pushover');&eol;            response = null;&eol;        }&eol;    }&eol;&eol;    if (request.Status() != 200 &pipe;&pipe; response === null &pipe;&pipe; typeof response !== 'object' &pipe;&pipe; response.status !== 1) {&eol;        if (response !== null && typeof response === 'object' && typeof response.errors === 'object'&eol;                && typeof response.errors[0] === 'string') {&eol;            throw response.errors[0];&eol;        }&eol;        else {&eol;            throw 'Unknown error. Check debug log for more information.';&eol;        }&eol;    }&eol;&eol;    return 'OK';&eol;}&eol;catch (error) {&eol;    Zabbix.Log(4, '[ Pushover Webhook ] Pushover notification failed: ' + error);&eol;    throw 'Pushover notification failed: ' + error;&eol;}|30s    |0           |0              |                                      |                                                          |Please refer to setup guide here: https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/pushover&eol;&eol;Set token parameter with to your Pushover application key.&eol;When assigning Pushover media to the Zabbix user - add user key into send to field|
ROW   |9          |4   |Slack                 |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |var SEVERITY_COLORS = [&eol;    '#97AAB3', '#7499FF', '#FFC859',&eol;    '#FFA059', '#E97659', '#E45959'&eol;];&eol;&eol;var RESOLVE_COLOR = '#009900';&eol;&eol;var SLACK_MODE_HANDLERS = {&eol;    alarm: handlerAlarm,&eol;    event: handlerEvent&eol;};&eol;&eol;var EVENT_STATUS = {&eol;    PROBLEM: 'PROBLEM',&eol;    UPDATE: 'UPDATE',&eol;    RESOLVE: 'OK'&eol;};&eol;&eol;if (!String.prototype.format) {&eol;    String.prototype.format = function() {&eol;        var args = arguments;&eol;&eol;        return this.replace(/{(\d+)}/g, function(match, number) {&eol;            return number in args&eol;                ? args[number]&eol;                : match&eol;            ;&eol;        });&eol;    };&eol;}&eol;&eol;function isEventProblem(params) {&eol;    return params.event_value == 1&eol;        && params.event_update_status == 0&eol;    ;&eol;}&eol;&eol;function isEventUpdate(params) {&eol;    return params.event_value == 1&eol;        && params.event_update_status == 1&eol;    ;&eol;}&eol;&eol;function isEventResolve(params) {&eol;    return params.event_value == 0;&eol;}&eol;&eol;function getPermalink(channelId, messageTimestamp) {&eol;    var req = new CurlHttpRequest();&eol;&eol;    req.AddHeader('Content-Type: application/x-www-form-urlencoded; charset=utf-8');&eol;&eol;    var resp = JSON.parse(req.Get(&eol;        '{0}?token={1}&channel={2}&message_ts={3}'.format(&eol;            Slack.getPermalink,&eol;            params.bot_token,&eol;            channelId,&eol;            messageTimestamp&eol;        )&eol;    ));&eol;&eol;    if (req.Status != 200 && !resp.ok) {&eol;        throw resp.error;&eol;    }&eol;&eol;    return resp.permalink;&eol;}&eol;&eol;function createProblemURL(zabbix_url, triggerid, eventid) {&eol;    var problem_url = '{0}/tr_events.php?triggerid={1}&eventid={2}'&eol;        .format(&eol;            zabbix_url.replace(/\/+$/, ''),&eol;            triggerid,&eol;            eventid&eol;        );&eol;&eol;    return problem_url;&eol;}&eol;&eol;function getTagValue(event_tags, key) {&eol;    var pattern = new RegExp('(' + key + ':.+)');&eol;    var tag_value = event_tags&eol;        .split(',')&eol;        .filter(function (v) {&eol;            return v.match(pattern);&eol;        })&eol;        .map(function (v) {&eol;            return v.split(':')[1];&eol;        })[0]&eol;        &pipe;&pipe; 0;&eol;&eol;    return tag_value;&eol;}&eol;&eol;function handlerAlarm(params) {&eol;    var fields = {&eol;        channel: params.channel,&eol;        as_user: params.slack_as_user,&eol;    };&eol;&eol;    if (isEventProblem(params)) {&eol;        fields.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.PROBLEM,&eol;                SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;                params.event_date,&eol;                params.event_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&eol;            )&eol;        ];&eol;&eol;        var resp = JSON.parse(req.Post(Slack.postMessage, JSON.stringify(fields)));&eol;&eol;        if (req.Status != 200 && !resp.ok) {&eol;            throw resp.error;&eol;        }&eol;&eol;        result.tags.__message_ts = resp.ts;&eol;        result.tags.__channel_id = resp.channel;&eol;        result.tags.__channel_name = params.channel;&eol;        result.tags.__message_link = getPermalink(resp.channel, resp.ts);&eol;    }&eol;    else if (isEventUpdate(params)) {&eol;        fields.thread_ts = getTagValue(params.event_tags, 'message_ts');&eol;        fields.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.UPDATE,&eol;                SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;                params.event_update_date,&eol;                params.event_update_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id),&eol;                true,&eol;                params.event_update_message&eol;            )&eol;        ];&eol;&eol;        resp = JSON.parse(req.Post(Slack.postMessage, JSON.stringify(fields)));&eol;        if (req.Status != 200 && !resp.ok) {&eol;            throw resp.error;&eol;        }&eol;&eol;    }&eol;    else if (isEventResolve(params)) {&eol;        fields.channel = getTagValue(params.event_tags, 'channel_id');&eol;        fields.text = '';&eol;        fields.ts = getTagValue(params.event_tags, 'message_ts');&eol;        fields.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.RESOLVE,&eol;                RESOLVE_COLOR,&eol;                params.event_date,&eol;                params.event_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&eol;            )&eol;        ];&eol;&eol;        resp = JSON.parse(req.Post(Slack.chatUpdate, JSON.stringify(fields)));&eol;        if (req.Status != 200 && !resp.ok) {&eol;            throw resp.error;&eol;        }&eol;    }&eol;}&eol;&eol;function handlerEvent(params) {&eol;    var fields = {&eol;        channel: params.channel,&eol;        as_user: params.slack_as_user&eol;    };&eol;&eol;    if (isEventProblem(params)) {&eol;        fields.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.PROBLEM,&eol;                SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;                params.event_date,&eol;                params.event_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&eol;            )&eol;        ];&eol;&eol;        var resp = JSON.parse(req.Post(Slack.postMessage, JSON.stringify(fields)));&eol;&eol;        if (req.Status != 200 && !resp.ok) {&eol;            throw resp.error;&eol;        }&eol;&eol;        result.tags.__channel_name = params.channel;&eol;        result.tags.__message_link = getPermalink(resp.channel, resp.ts);&eol;&eol;    }&eol;    else if (isEventUpdate(params)) {&eol;        fields.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.UPDATE,&eol;                SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;                params.event_update_date,&eol;                params.event_update_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id),&eol;                false,&eol;                params.event_update_message&eol;            )&eol;        ];&eol;&eol;        resp = JSON.parse(req.Post(Slack.postMessage, JSON.stringify(fields)));&eol;&eol;        if (req.Status != 200 && !resp.ok) {&eol;            throw resp.error;&eol;        }&eol;&eol;    }&eol;    else if (isEventResolve(params)) {&eol;        fields.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.RESOLVE,&eol;                RESOLVE_COLOR,&eol;                params.event_recovery_date,&eol;                params.event_recovery_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&eol;            )&eol;        ];&eol;&eol;        resp = JSON.parse(req.Post(Slack.postMessage, JSON.stringify(fields)));&eol;&eol;        if (req.Status != 200 && !resp.ok) {&eol;            throw resp.error;&eol;        }&eol;    }&eol;}&eol;&eol;function createMessage(&eol;    status,&eol;    event_severity_color,&eol;    event_date,&eol;    event_time,&eol;    problem_url,&eol;    isShort,&eol;    messageText&eol;) {&eol;    var message = {&eol;        fallback: '{0}: {1}'.format(status, params.event_name),&eol;        title: '{0}: {1}'.format(status, params.event_name),&eol;        color: event_severity_color,&eol;        title_link: problem_url,&eol;        pretext: messageText &pipe;&pipe; '',&eol;&eol;        fields: [&eol;            {&eol;                title: 'Host',&eol;                value: '{0} [{1}]'.format(params.host_name, params.host_ip),&eol;                short: true&eol;            },&eol;            {&eol;                title: 'Event time',&eol;                value: '{0} {1}'.format(event_date, event_time),&eol;                short: true&eol;            },&eol;            {&eol;                title: 'Severity',&eol;                value: params.event_severity,&eol;                short: true&eol;            },&eol;            {&eol;                title: 'Opdata',&eol;                value: params.event_opdata,&eol;                short: true&eol;            }&eol;        ],&eol;    };&eol;&eol;    if (!isShort) {&eol;        message['actions'] = [&eol;            {&eol;                type: 'button',&eol;                text: 'Open in Zabbix',&eol;                url: problem_url&eol;            }&eol;        ];&eol;&eol;        message.fields.push(&eol;            {&eol;                title: 'Event tags',&eol;                value: params.event_tags.replace(/__.+?:(.+?,&pipe;.+)/g, '') &pipe;&pipe; 'None',&eol;                short: true&eol;            },&eol;            {&eol;                title: 'Trigger description',&eol;                value: params.trigger_description,&eol;                short: true&eol;            }&eol;        );&eol;    }&eol;&eol;    return message;&eol;}&eol;&eol;function validateParams(params) {&eol;    if (typeof params.bot_token !== 'string' &pipe;&pipe; params.bot_token.trim() === '') {&eol;        throw 'Field "bot_token" cannot be empty';&eol;    }&eol;&eol;    if (typeof params.channel !== 'string' &pipe;&pipe; params.channel.trim() === '') {&eol;        throw 'Field "channel" cannot be empty';&eol;    }&eol;&eol;    if (isNaN(params.event_id)) {&eol;        throw 'Field "event_id" is not a number';&eol;    }&eol;&eol;    if (!~[0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity))) {&eol;        throw 'Incorrect "event_nseverity" parameter given: ' + params.event_nseverity + '\nMust be 0-5.';&eol;    }&eol;&eol;    if (typeof params.event_severity !== 'string' &pipe;&pipe; params.event_severity.trim() === '') {&eol;        throw 'Field "event_severity" cannot be empty';&eol;    }&eol;&eol;    if (params.event_update_status !== '0' && params.event_update_status !== '1') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_value !== '0' && params.event_value !== '1') {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (typeof params.host_ip !== 'string' &pipe;&pipe; params.host_ip.trim() === '') {&eol;        throw 'Field "host_ip" cannot be empty';&eol;    }&eol;&eol;    if (typeof params.host_name !== 'string' &pipe;&pipe; params.host_name.trim() === '') {&eol;        throw 'Field "host_name" cannot be empty';&eol;    }&eol;&eol;    if (!~['true', 'false'].indexOf(params.slack_as_user.toLowerCase())) {&eol;        throw 'Incorrect "slack_as_user" parameter given: ' + params.slack_as_user + '\nMust be "true" or "false".';&eol;    }&eol;&eol;    if (!~['alarm', 'event'].indexOf(params.slack_mode)) {&eol;        throw 'Incorrect "slack_mode" parameter given: ' + params.slack_mode + '\nMust be "alarm" or "event".';&eol;    }&eol;&eol;    if (isNaN(params.trigger_id)) {&eol;        throw 'field "trigger_id" is not a number';&eol;    }&eol;&eol;    if (typeof params.zabbix_url !== 'string' &pipe;&pipe; params.zabbix_url.trim() === '') {&eol;        throw 'Field "zabbix_url" cannot be empty';&eol;    }&eol;&eol;    if (!/^(http&pipe;https):\/\/.+/.test(params.zabbix_url)) {&eol;        throw 'Field "zabbix_url" must contain a schema';&eol;    }&eol;}&eol;&eol;try {&eol;    var params = JSON.parse(value);&eol;&eol;    validateParams(params);&eol;&eol;    var req = new CurlHttpRequest(),&eol;        result = {tags: {}};&eol;&eol;    if (typeof params.HTTPProxy === 'string' && params.HTTPProxy.trim() !== '') {&eol;        req.SetProxy(params.HTTPProxy);&eol;    }&eol;&eol;    req.AddHeader('Content-Type: application/json; charset=utf-8');&eol;    req.AddHeader('Authorization: Bearer ' + params.bot_token);&eol;&eol;    var slack_endpoint = 'https://slack.com/api/';&eol;&eol;    var Slack = {&eol;        postMessage: slack_endpoint + 'chat.postMessage',&eol;        getPermalink: slack_endpoint + 'chat.getPermalink',&eol;        chatUpdate: slack_endpoint + 'chat.update'&eol;    };&eol;&eol;    params.slack_mode = params.slack_mode.toLowerCase();&eol;    params.slack_mode = params.slack_mode in SLACK_MODE_HANDLERS&eol;        ? params.slack_mode&eol;        : 'alarm';&eol;&eol;    SLACK_MODE_HANDLERS[params.slack_mode](params);&eol;&eol;    return JSON.stringify(result);&eol;&eol;}&eol;catch (error) {&eol;    Zabbix.Log(4, '[ Mattermost Webhook ] Slack notification failed : ' + error);&eol;    throw 'Slack notification failed : ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__message_link}           |Open in Slack: {EVENT.TAGS.__channel_name}                ||
ROW   |10         |4   |Discord               |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |var SEVERITY_COLORS = [&eol;    '#97AAB3', // Not classified.&eol;    '#7499FF', // Information.&eol;    '#FFC859', // Warning.&eol;    '#FFA059', // Average.&eol;    '#E97659', // High.&eol;    '#E45959', // Disaster.&eol;    '#009900'  // Resolved.&eol;];&eol;&eol;function stringTruncate(str, len) {&eol;    return str.length > len ? str.substring(0, len - 3) + '...' : str;&eol;}&eol;&eol;try {&eol;    Zabbix.Log(4, '[ Discord Webhook ] Executed with params: ' + value);&eol;&eol;    var params = JSON.parse(value);&eol;&eol;    if (!params.discord_endpoint) {&eol;        throw 'Cannot get discord_endpoint';&eol;    }&eol;    else if (!params.discord_endpoint.startsWith('https://discordapp.com/api/webhooks')) {&eol;        throw 'Invalid Discord webhook URL: ' + params.discord_endpoint;&eol;    }&eol;    else {&eol;        params.discord_endpoint = params.discord_endpoint.replace('/api/', '/api/v1000/') + '?wait=True';&eol;    }&eol;&eol;    params.zabbix_url = (params.zabbix_url.endsWith('/'))&eol;        ? params.zabbix_url.slice(0, -1) : params.zabbix_url;&eol;&eol;    if (!(params.event_value == 0 &pipe;&pipe; params.event_value == 1)) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (!(params.event_update_status == 0 &pipe;&pipe; params.event_update_status == 1)) {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_value == 0) {&eol;        params.event_nseverity = '6';&eol;    }&eol;&eol;    if (!SEVERITY_COLORS[params.event_nseverity]) {&eol;        throw 'Incorrect "event_nseverity" parameter given: ' + params.event_nseverity + '\nMust be 0-5.';&eol;    }&eol;&eol;    var color = parseInt(SEVERITY_COLORS[params.event_nseverity].replace('#', ''), 16),&eol;        fields = [],&eol;        body = {&eol;            embeds: [&eol;                {&eol;                    color: color &pipe;&pipe; 0,&eol;                    url: params.zabbix_url + '/tr_events.php?triggerid=' +&eol;                        params.trigger_id + '&eventid=' + params.event_id&eol;                }&eol;            ]&eol;        };&eol;&eol;    // Default message from {ALERT.MESSAGE}.&eol;    if (params.use_default_message.toLowerCase() == 'true') {&eol;        body.embeds[0].title = stringTruncate(params.alert_subject, 256);&eol;        body.embeds[0].description = stringTruncate(params.alert_message, 2048);&eol;    }&eol;    else {&eol;        fields.push(&eol;            {&eol;                name: 'Host',&eol;                value: params.host_name + ' [' + params.host_ip + ']'&eol;            }&eol;        );&eol;&eol;        // Resolved message.&eol;        if (params.event_value == 0) {&eol;            body.embeds[0].title = stringTruncate('OK: ' + params.event_name, 256);&eol;            fields.push(&eol;                {&eol;                    name: 'Recovery time',&eol;                    value: params.event_recovery_time + ' ' + params.event_recovery_date,&eol;                    inline: 'True'&eol;                }&eol;            );&eol;        }&eol;&eol;        // Problem message.&eol;        else if (params.event_update_status == 0) {&eol;            body.embeds[0].title = stringTruncate('PROBLEM: ' + params.event_name, 256);&eol;            fields.push(&eol;                {&eol;                    name: 'Event time',&eol;                    value: params.event_time + ' ' + params.event_date,&eol;                    inline: 'True'&eol;                }&eol;            );&eol;        }&eol;&eol;        // Update message.&eol;        else if (params.event_update_status == 1) {&eol;            body.embeds[0].title = stringTruncate('UPDATE: ' + params.event_name, 256);&eol;            body.embeds[0].description = params.event_update_user + ' ' + params.event_update_action + '.';&eol;&eol;            if (params.event_update_message) {&eol;                body.embeds[0].description += ' Comment:\n>>> ' + params.event_update_message;&eol;            }&eol;&eol;            body.embeds[0].description = stringTruncate(body.embeds[0].description, 2048);&eol;&eol;            fields.push(&eol;                {&eol;                    name: 'Event update time',&eol;                    value: params.event_update_time + ' ' + params.event_update_date,&eol;                    inline: 'True'&eol;                }&eol;            );&eol;        }&eol;&eol;        fields.push(&eol;            {&eol;                name: 'Severity',&eol;                value: params.event_severity,&eol;                inline: 'True'&eol;            }&eol;        );&eol;&eol;        if (params.event_opdata) {&eol;            fields.push(&eol;                {&eol;                    name: 'Operational data',&eol;                    value: stringTruncate(params.event_opdata, 1024),&eol;                    inline: 'True'&eol;                }&eol;            );&eol;        }&eol;&eol;        if (params.event_value == 1 && params.event_update_status == 0 && params.trigger_description) {&eol;            fields.push(&eol;                {&eol;                    name: 'Trigger description',&eol;                    value: stringTruncate(params.trigger_description, 1024)&eol;                }&eol;            );&eol;        }&eol;&eol;        body.embeds[0].footer = {&eol;            text: 'Event ID: ' + params.event_id&eol;        };&eol;&eol;        if (params.event_tags) {&eol;            body.embeds[0].footer.text += '\nEvent tags: ' + params.event_tags;&eol;        }&eol;        body.embeds[0].footer.text = stringTruncate(body.embeds[0].footer.text, 2048);&eol;    }&eol;&eol;    if (fields.length > 0) {&eol;        body.embeds[0].fields = fields;&eol;    }&eol;&eol;    var req = new CurlHttpRequest();&eol;&eol;    if (typeof params.HTTPProxy === 'string' && params.HTTPProxy.trim() !== '') {&eol;        req.SetProxy(params.HTTPProxy);&eol;    }&eol;&eol;    req.AddHeader('Content-Type: application/json');&eol;&eol;    var resp = req.Post(params.discord_endpoint, JSON.stringify(body)),&eol;        data = JSON.parse(resp);&eol;&eol;    Zabbix.Log(4, '[ Discord Webhook ] JSON: ' + JSON.stringify(body));&eol;    Zabbix.Log(4, '[ Discord Webhook ] Response: ' + resp);&eol;&eol;    if (data.id) {&eol;        return resp;&eol;    }&eol;    else {&eol;        var message = ((typeof data.message === 'string') ? data.message : 'Unknown error');&eol;&eol;        Zabbix.Log(3, '[ Discord Webhook ] FAILED with response: ' + resp);&eol;        throw message + '. For more details check zabbix server log.';&eol;    }&eol;}&eol;catch (error) {&eol;    Zabbix.Log(3, '[ Discord Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |0           |0              |                                      |                                                          ||
ROW   |11         |4   |SIGNL4                |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |// SIGNL4 Webhook&eol;try {&eol;    var response,&eol;        payload,&eol;        params = JSON.parse(value),&eol;        endpoint = 'https://connect.signl4.com/webhook/',&eol;        request = new CurlHttpRequest();&eol;&eol;    if (typeof params.HTTPProxy === 'string' && params.HTTPProxy.trim() !== '') {&eol;        request.SetProxy(params.HTTPProxy);&eol;    }&eol;&eol;    if (typeof params.teamsecret === 'string' && params.teamsecret.trim() !== '') {&eol;        endpoint += params.teamsecret;&eol;        delete params.teamsecret;&eol;    }&eol;    else {&eol;        throw 'The team secret of your SIGNL4 team cannot be empty.';&eol;    }&eol;&eol;    if (typeof params.Severity === 'string' && params.Severity === '{EVENT.SEVERITY}') {&eol;        params.Severity = 'Not classified';&eol;    }&eol;&eol;	if (typeof params.User === 'string' && params.User === '{USER.FULLNAME}') {&eol;        params.User = '';&eol;    }&eol;&eol;	if (typeof params.Event_Update_Action === 'string' && params.Event_Update_Action === '{EVENT.UPDATE.ACTION}') {&eol;        params.Event_Update_Action = '';&eol;    }&eol;&eol;	// Assamble X-S4-ExternalID for two-way integration&eol;	// Format: "ZabbixEventID: 222 ZabbixURL: https://your-zabbix-server/zabbix/"&eol;	params['X-S4-ExternalID'] = 'ZabbixEventID: ' + params.Event_ID;&eol;	if (typeof params.Zabbix_URL === 'string' && params.Zabbix_URL.indexOf('http') == 0) {&eol;		// Make sure the URL ends with '/'&eol;		if (params.Zabbix_URL.charAt(params.Zabbix_URL.length - 1) != '/') {&eol;			params.Zabbix_URL = params.Zabbix_URL + '/';&eol;		}&eol;&eol;		params['X-S4-ExternalID'] = params['X-S4-ExternalID'] + ' ZabbixURL: ' +  params.Zabbix_URL;&eol;&eol;		// Add Link parameter&eol;		params['Link'] = params.Zabbix_URL + "tr_events.php?triggerid="+params.Trigger_ID + "&eventid=" + params.Event_ID;&eol;	}&eol;&eol;    payload = JSON.stringify(params);&eol;    Zabbix.Log(4, '[ SIGNL4 Webhook ] Sending request: ' + payload);&eol;&eol;    request.AddHeader('Content-Type: application/json');&eol;    response = request.Post(endpoint, 'payload=' + payload);&eol;&eol;    Zabbix.Log(4, '[ SIGNL4 Webhook ] Received response with status code ' +&eol;            request.Status() + '\n' + response&eol;    );&eol;&eol;    if (request.Status() !== 201) {&eol;        throw 'Request failed with status code ' + request.Status() +&eol;                '. Check debug log for more information.';&eol;    }&eol;&eol;    return 'OK';&eol;}&eol;catch (error) {&eol;    Zabbix.Log(4, '[ SIGNL4 Webhook ] ERROR: ' + error);&eol;&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |0           |0              |                                      |                                                          |SIGNL4 is a mobile alert notification app for powerful alerting, alert management and mobile assignment of work items. It offers alerting via app push, SMS and voice calls including escalations, tracking, and duty scheduling.&eol;&eol;Get the app at https://www.signl4.com|
ROW   |12         |4   |Jira                  |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |var Jira = {&eol;    params: {},&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        Jira.params = params;&eol;        if (typeof Jira.params.url === 'string') {&eol;            if (!Jira.params.url.endsWith('/')) {&eol;                Jira.params.url += '/';&eol;            }&eol;&eol;            Jira.params.url += 'rest/api/latest/';&eol;        }&eol;    },&eol;&eol;    setProxy: function (HTTPProxy) {&eol;        Jira.HTTPProxy = HTTPProxy;&eol;    },&eol;&eol;    setTags: function(event_tags_json) {&eol;        if (typeof event_tags_json !== 'undefined' && event_tags_json !== ''&eol;            && event_tags_json !== '{EVENT.TAGSJSON}') {&eol;            try {&eol;                var tags = JSON.parse(event_tags_json),&eol;                    label;&eol;&eol;                Jira.labels = [];&eol;&eol;                tags.forEach(function (tag) {&eol;                    if (typeof tag.tag !== 'undefined' && typeof tag.value !== 'undefined' ) {&eol;                        label = (tag.tag + (tag.value ? (':' + tag.value) : '')).replace(/\s/g, '_');&eol;                        if (label.length < 256) {&eol;                            Jira.labels.push(label);&eol;                        }&eol;                    }&eol;                });&eol;            }&eol;            catch (error) {&eol;                // Code is not missing here.&eol;            }&eol;        }&eol;    },&eol;&eol;    escapeMarkup: function (str) {&eol;        var length = str.length,&eol;            result = '',&eol;            markup = ['{', '&pipe;', '}', '~', '_', '\\', '[', ']', '^', '<', '>', '?', '!', '#', '+', '*', '&'];&eol;&eol;        for (var i = 0; i < length; i++) {&eol;            var char = str[i];&eol;&eol;            result += (markup.indexOf(char) !== -1) ? ('&#' + str[i].charCodeAt() + ';') : char;&eol;        }&eol;&eol;        return result;&eol;    },&eol;&eol;    addCustomFields: function (data, fields) {&eol;        if (typeof fields === 'object' && Object.keys(fields).length) {&eol;            var schema = Jira.getSchema(),&eol;                path = ['projects', 0, 'issuetypes', 0, 'fields'],&eol;                field;&eol;&eol;            while ((field = path.shift()) !== undefined) {&eol;                schema = schema[field];&eol;                if (typeof schema === 'undefined') {&eol;                    schema = null;&eol;                    break;&eol;                }&eol;            }&eol;&eol;            if (schema) {&eol;                Object.keys(fields)&eol;                    .forEach(function(field) {&eol;                        data.fields[field] = fields[field];&eol;&eol;                        if (typeof schema[field] === 'object' && typeof schema[field].schema === 'object'&eol;                            && (schema[field].schema.type === 'number' &pipe;&pipe; schema[field].schema.type === 'datetime')) {&eol;                            switch (schema[field].schema.type) {&eol;                                case 'number':&eol;                                    data.fields[field] = parseInt(fields[field]);&eol;                                    break;&eol;&eol;                                case 'datetime':&eol;                                    if (fields[field].match(/\d+[.-]\d+[.-]\d+T\d+:\d+:\d+/) !== null) {&eol;                                        data.fields[field] = fields[field].replace(/\./g, '-');&eol;                                    }&eol;                                    else {&eol;                                        delete data.fields[field];&eol;                                    }&eol;                                    break;&eol;                            }&eol;                        }&eol;                    });&eol;            }&eol;            else {&eol;                Zabbix.Log(4, '[ Jira Webhook ] Failed to retrieve field schema.');&eol;            }&eol;        }&eol;&eol;        return data;&eol;    },&eol;&eol;    request: function (method, query, data) {&eol;        ['url', 'user', 'password', 'project_key', 'issue_type'].forEach(function (field) {&eol;            if (typeof Jira.params !== 'object' &pipe;&pipe; typeof Jira.params[field] === 'undefined'&eol;                &pipe;&pipe; Jira.params[field] === '' ) {&eol;                throw 'Required Jira param is not set: "' + field + '".';&eol;            }&eol;        });&eol;&eol;        var response,&eol;            url = Jira.params.url + query,&eol;            request = new CurlHttpRequest();&eol;&eol;        request.AddHeader('Content-Type: application/json');&eol;        request.AddHeader('Authorization: Basic ' + btoa(Jira.params.user + ':' + Jira.params.password));&eol;&eol;        if (typeof Jira.HTTPProxy !== 'undefined' && Jira.HTTPProxy !== '') {&eol;            request.SetProxy(Jira.HTTPProxy);&eol;        }&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.Log(4, '[ Jira Webhook ] Sending request: ' + url + ((typeof data === 'string') ? ('\n' + data) : ''));&eol;&eol;        switch (method) {&eol;            case 'get':&eol;                response = request.Get(url, data);&eol;                break;&eol;&eol;            case 'post':&eol;                response = request.Post(url, data);&eol;                break;&eol;&eol;            case 'put':&eol;                response = request.Put(url, data);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.Log(4, '[ Jira Webhook ] Received response with status code ' + request.Status() + '\n' + response);&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.Log(4, '[ Jira Webhook ] Failed to parse response received from Jira');&eol;                response = null;&eol;            }&eol;        }&eol;&eol;        if (request.Status() < 200 &pipe;&pipe; request.Status() >= 300) {&eol;            var message = 'Request failed with status code ' + request.Status();&eol;&eol;            if (response !== null && typeof response.errors !== 'undefined'&eol;                && Object.keys(response.errors).length > 0) {&eol;                message += ': ' + JSON.stringify(response.errors);&eol;            }&eol;            else if (response !== null && typeof response.errorMessages !== 'undefined'&eol;                && Object.keys(response.errorMessages).length > 0) {&eol;                message += ': ' + JSON.stringify(response.errorMessages);&eol;            }&eol;&eol;            throw message + ' Check debug log for more information.';&eol;        }&eol;&eol;        return {&eol;            status: request.Status(),&eol;            response: response&eol;        };&eol;    },&eol;&eol;    getSchema: function() {&eol;        var result = Jira.request('get', 'issue/createmeta?expand=projects.issuetypes.fields&projectKeys=' +&eol;                Jira.params.project_key + '&issuetypeNames=' + Jira.params.issue_type);&eol;&eol;        return result.response;&eol;    },&eol;&eol;    createIssue: function(summary, description, fields) {&eol;        var data = {&eol;            fields: {&eol;                project: {&eol;                    key: Jira.params.project_key&eol;                },&eol;                issuetype: {&eol;                    name: Jira.params.issue_type&eol;                },&eol;                summary: summary,&eol;                description: description&eol;            }&eol;        };&eol;&eol;        if (Jira.labels && Jira.labels.length > 0) {&eol;            data.fields.labels = Jira.labels;&eol;        }&eol;        var result = Jira.request('post', 'issue', Jira.addCustomFields(data, fields));&eol;&eol;        if (typeof result.response !== 'object' &pipe;&pipe; typeof result.response.key === 'undefined') {&eol;            throw 'Cannot create Jira issue. Check debug log for more information.';&eol;        }&eol;&eol;        return result.response.key;&eol;    },&eol;&eol;    updateIssue: function(summary, fields, update) {&eol;        var data = {fields: {}};&eol;&eol;        if (summary) {&eol;            data.fields.summary = summary;&eol;        }&eol;&eol;        Jira.request('put', 'issue/' + Jira.params.issue_key, Jira.addCustomFields(data, fields));&eol;        Jira.commentIssue(update);&eol;    },&eol;&eol;    commentIssue: function(update) {&eol;        var data = {};&eol;&eol;        if (typeof update === 'string') {&eol;            data.body = update;&eol;            Jira.request('post', 'issue/' + Jira.params.issue_key + '/comment', data);&eol;        }&eol;        else if (update.status === '1') {&eol;            data.body = update.user + ' ' + update.action + '.';&eol;&eol;            if (update.message) {&eol;                data.body += '\nMessage: {quote}' + Jira.escapeMarkup(update.message) + '{quote}';&eol;            }&eol;&eol;            Jira.request('post', 'issue/' + Jira.params.issue_key + '/comment', data);&eol;        }&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        fields = {},&eol;        jira = {},&eol;        update = {},&eol;        result = {tags: {}},&eol;        required_params = ['alert_subject', 'summary', 'event_recovery_value', 'event_source', 'event_value'];&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('jira_')) {&eol;                jira[key.substring(5)] = params[key];&eol;            }&eol;            else if (key.startsWith('customfield_')) {&eol;                fields[key] = params[key];&eol;            }&eol;            else if (key.startsWith('event_update_')) {&eol;                update[key.substring(13)] = params[key];&eol;            }&eol;            else if (required_params.indexOf(key) !== -1 && params[key] === '') {&eol;                throw 'Parameter "' + key + '" can\'t be empty.';&eol;            }&eol;        });&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_update_status !== '0' && params.event_update_status !== '1' && params.event_source === '0') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_source !== '0' && params.event_recovery_value === '0') {&eol;        throw 'Recovery operations are supported only for trigger-based actions.';&eol;    }&eol;&eol;    Jira.setParams(jira);&eol;    Jira.setProxy(params.HTTPProxy);&eol;    Jira.setTags(params.event_tags_json);&eol;&eol;    // Create issue for non trigger-based events.&eol;    if (params.event_source !== '0' && params.event_recovery_value !== '0') {&eol;        Jira.createIssue(params.alert_subject, params.alert_message);&eol;    }&eol;    // Create issue for trigger-based events.&eol;    else if (params.event_value === '1' && update.status === '0' && !jira.issue_key.startsWith(jira.project_key)) {&eol;        var key = Jira.createIssue(params.alert_subject,&eol;            (Object.keys(fields).length ? params.trigger_description : params.alert_message), fields);&eol;&eol;&eol;        result.tags.__zbx_jira_issuekey = key;&eol;        result.tags.__zbx_jira_issuelink = params.jira_url +&eol;            (params.jira_url.endsWith('/') ? '' : '/') + 'browse/' + key;&eol;    }&eol;    // Update created issue for trigger-based event.&eol;    else {&eol;        if (!jira.issue_key.startsWith(jira.project_key)) {&eol;            throw 'Incorrect Issue key given: ' + jira.issue_key;&eol;        }&eol;        Jira.updateIssue(params.alert_subject, fields,&eol;            ((params.event_value === '0' && !Object.keys(fields).length)&eol;                ? params.alert_message : update));&eol;    }&eol;&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.Log(3, '[ Jira Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_jira_issuelink}     |Jira: {EVENT.TAGS.__zbx_jira_issuekey}                    ||
ROW   |13         |4   |Jira with CustomFields|                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |var Jira = {&eol;    params: {},&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        Jira.params = params;&eol;        if (typeof Jira.params.url === 'string') {&eol;            if (!Jira.params.url.endsWith('/')) {&eol;                Jira.params.url += '/';&eol;            }&eol;&eol;            Jira.params.url += 'rest/api/latest/';&eol;        }&eol;    },&eol;&eol;    setProxy: function (HTTPProxy) {&eol;        Jira.HTTPProxy = HTTPProxy;&eol;    },&eol;&eol;    setTags: function(event_tags_json) {&eol;        if (typeof event_tags_json !== 'undefined' && event_tags_json !== ''&eol;            && event_tags_json !== '{EVENT.TAGSJSON}') {&eol;            try {&eol;                var tags = JSON.parse(event_tags_json),&eol;                    label;&eol;&eol;                Jira.labels = [];&eol;&eol;                tags.forEach(function (tag) {&eol;                    if (typeof tag.tag !== 'undefined' && typeof tag.value !== 'undefined' ) {&eol;                        label = (tag.tag + (tag.value ? (':' + tag.value) : '')).replace(/\s/g, '_');&eol;                        if (label.length < 256) {&eol;                            Jira.labels.push(label);&eol;                        }&eol;                    }&eol;                });&eol;            }&eol;            catch (error) {&eol;                // Code is not missing here.&eol;            }&eol;        }&eol;    },&eol;&eol;    escapeMarkup: function (str) {&eol;        var length = str.length,&eol;            result = '',&eol;            markup = ['{', '&pipe;', '}', '~', '_', '\\', '[', ']', '^', '<', '>', '?', '!', '#', '+', '*', '&'];&eol;&eol;        for (var i = 0; i < length; i++) {&eol;            var char = str[i];&eol;&eol;            result += (markup.indexOf(char) !== -1) ? ('&#' + str[i].charCodeAt() + ';') : char;&eol;        }&eol;&eol;        return result;&eol;    },&eol;&eol;    addCustomFields: function (data, fields) {&eol;        if (typeof fields === 'object' && Object.keys(fields).length) {&eol;            var schema = Jira.getSchema(),&eol;                path = ['projects', 0, 'issuetypes', 0, 'fields'],&eol;                field;&eol;&eol;            while ((field = path.shift()) !== undefined) {&eol;                schema = schema[field];&eol;                if (typeof schema === 'undefined') {&eol;                    schema = null;&eol;                    break;&eol;                }&eol;            }&eol;&eol;            if (schema) {&eol;                Object.keys(fields)&eol;                    .forEach(function(field) {&eol;                        data.fields[field] = fields[field];&eol;&eol;                        if (typeof schema[field] === 'object' && typeof schema[field].schema === 'object'&eol;                            && (schema[field].schema.type === 'number' &pipe;&pipe; schema[field].schema.type === 'datetime')) {&eol;                            switch (schema[field].schema.type) {&eol;                                case 'number':&eol;                                    data.fields[field] = parseInt(fields[field]);&eol;                                    break;&eol;&eol;                                case 'datetime':&eol;                                    if (fields[field].match(/\d+[.-]\d+[.-]\d+T\d+:\d+:\d+/) !== null) {&eol;                                        data.fields[field] = fields[field].replace(/\./g, '-');&eol;                                    }&eol;                                    else {&eol;                                        delete data.fields[field];&eol;                                    }&eol;                                    break;&eol;                            }&eol;                        }&eol;                    });&eol;            }&eol;            else {&eol;                Zabbix.Log(4, '[ Jira Webhook ] Failed to retrieve field schema.');&eol;            }&eol;        }&eol;&eol;        return data;&eol;    },&eol;&eol;    request: function (method, query, data) {&eol;        ['url', 'user', 'password', 'project_key', 'issue_type'].forEach(function (field) {&eol;            if (typeof Jira.params !== 'object' &pipe;&pipe; typeof Jira.params[field] === 'undefined'&eol;                &pipe;&pipe; Jira.params[field] === '' ) {&eol;                throw 'Required Jira param is not set: "' + field + '".';&eol;            }&eol;        });&eol;&eol;        var response,&eol;            url = Jira.params.url + query,&eol;            request = new CurlHttpRequest();&eol;&eol;        request.AddHeader('Content-Type: application/json');&eol;        request.AddHeader('Authorization: Basic ' + btoa(Jira.params.user + ':' + Jira.params.password));&eol;&eol;        if (typeof Jira.HTTPProxy !== 'undefined' && Jira.HTTPProxy !== '') {&eol;            request.SetProxy(Jira.HTTPProxy);&eol;        }&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.Log(4, '[ Jira Webhook ] Sending request: ' + url + ((typeof data === 'string') ? ('\n' + data) : ''));&eol;&eol;        switch (method) {&eol;            case 'get':&eol;                response = request.Get(url, data);&eol;                break;&eol;&eol;            case 'post':&eol;                response = request.Post(url, data);&eol;                break;&eol;&eol;            case 'put':&eol;                response = request.Put(url, data);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.Log(4, '[ Jira Webhook ] Received response with status code ' + request.Status() + '\n' + response);&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.Log(4, '[ Jira Webhook ] Failed to parse response received from Jira');&eol;                response = null;&eol;            }&eol;        }&eol;&eol;        if (request.Status() < 200 &pipe;&pipe; request.Status() >= 300) {&eol;            var message = 'Request failed with status code ' + request.Status();&eol;&eol;            if (response !== null && typeof response.errors !== 'undefined'&eol;                && Object.keys(response.errors).length > 0) {&eol;                message += ': ' + JSON.stringify(response.errors);&eol;            }&eol;            else if (response !== null && typeof response.errorMessages !== 'undefined'&eol;                && Object.keys(response.errorMessages).length > 0) {&eol;                message += ': ' + JSON.stringify(response.errorMessages);&eol;            }&eol;&eol;            throw message + ' Check debug log for more information.';&eol;        }&eol;&eol;        return {&eol;            status: request.Status(),&eol;            response: response&eol;        };&eol;    },&eol;&eol;    getSchema: function() {&eol;        var result = Jira.request('get', 'issue/createmeta?expand=projects.issuetypes.fields&projectKeys=' +&eol;                Jira.params.project_key + '&issuetypeNames=' + Jira.params.issue_type);&eol;&eol;        return result.response;&eol;    },&eol;&eol;    createIssue: function(summary, description, fields) {&eol;        var data = {&eol;            fields: {&eol;                project: {&eol;                    key: Jira.params.project_key&eol;                },&eol;                issuetype: {&eol;                    name: Jira.params.issue_type&eol;                },&eol;                summary: summary,&eol;                description: description&eol;            }&eol;        };&eol;&eol;        if (Jira.labels && Jira.labels.length > 0) {&eol;            data.fields.labels = Jira.labels;&eol;        }&eol;        var result = Jira.request('post', 'issue', Jira.addCustomFields(data, fields));&eol;&eol;        if (typeof result.response !== 'object' &pipe;&pipe; typeof result.response.key === 'undefined') {&eol;            throw 'Cannot create Jira issue. Check debug log for more information.';&eol;        }&eol;&eol;        return result.response.key;&eol;    },&eol;&eol;    updateIssue: function(summary, fields, update) {&eol;        var data = {fields: {}};&eol;&eol;        if (summary) {&eol;            data.fields.summary = summary;&eol;        }&eol;&eol;        Jira.request('put', 'issue/' + Jira.params.issue_key, Jira.addCustomFields(data, fields));&eol;        Jira.commentIssue(update);&eol;    },&eol;&eol;    commentIssue: function(update) {&eol;        var data = {};&eol;&eol;        if (typeof update === 'string') {&eol;            data.body = update;&eol;            Jira.request('post', 'issue/' + Jira.params.issue_key + '/comment', data);&eol;        }&eol;        else if (update.status === '1') {&eol;            data.body = update.user + ' ' + update.action + '.';&eol;&eol;            if (update.message) {&eol;                data.body += '\nMessage: {quote}' + Jira.escapeMarkup(update.message) + '{quote}';&eol;            }&eol;&eol;            Jira.request('post', 'issue/' + Jira.params.issue_key + '/comment', data);&eol;        }&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        fields = {},&eol;        jira = {},&eol;        update = {},&eol;        result = {tags: {}},&eol;        required_params = ['alert_subject', 'summary', 'event_recovery_value', 'event_source', 'event_value'];&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('jira_')) {&eol;                jira[key.substring(5)] = params[key];&eol;            }&eol;            else if (key.startsWith('customfield_')) {&eol;                fields[key] = params[key];&eol;            }&eol;            else if (key.startsWith('event_update_')) {&eol;                update[key.substring(13)] = params[key];&eol;            }&eol;            else if (required_params.indexOf(key) !== -1 && params[key] === '') {&eol;                throw 'Parameter "' + key + '" can\'t be empty.';&eol;            }&eol;        });&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_update_status !== '0' && params.event_update_status !== '1' && params.event_source === '0') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_source !== '0' && params.event_recovery_value === '0') {&eol;        throw 'Recovery operations are supported only for trigger-based actions.';&eol;    }&eol;&eol;    Jira.setParams(jira);&eol;    Jira.setProxy(params.HTTPProxy);&eol;    Jira.setTags(params.event_tags_json);&eol;&eol;    // Create issue for non trigger-based events.&eol;    if (params.event_source !== '0' && params.event_recovery_value !== '0') {&eol;        Jira.createIssue(params.alert_subject, params.alert_message);&eol;    }&eol;    // Create issue for trigger-based events.&eol;    else if (params.event_value === '1' && update.status === '0' && !jira.issue_key.startsWith(jira.project_key)) {&eol;        var key = Jira.createIssue(params.alert_subject,&eol;            (Object.keys(fields).length ? params.trigger_description : params.alert_message), fields);&eol;&eol;&eol;        result.tags.__zbx_jira_issuekey = key;&eol;        result.tags.__zbx_jira_issuelink = params.jira_url +&eol;            (params.jira_url.endsWith('/') ? '' : '/') + 'browse/' + key;&eol;    }&eol;    // Update created issue for trigger-based event.&eol;    else {&eol;        if (!jira.issue_key.startsWith(jira.project_key)) {&eol;            throw 'Incorrect Issue key given: ' + jira.issue_key;&eol;        }&eol;        Jira.updateIssue(params.alert_subject, fields,&eol;            ((params.event_value === '0' && !Object.keys(fields).length)&eol;                ? params.alert_message : update));&eol;    }&eol;&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.Log(3, '[ Jira Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_jira_issuelink}     |Jira: {EVENT.TAGS.__zbx_jira_issuekey}                    ||
ROW   |14         |4   |MS Teams              |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |var SEVERITY_COLORS = [&eol;    '#97AAB3', // Not classified.&eol;    '#7499FF', // Information.&eol;    '#FFC859', // Warning.&eol;    '#FFA059', // Average.&eol;    '#E97659', // High.&eol;    '#E45959', // Disaster.&eol;    '#009900', // Resolved.&eol;    '#000000'  // Default.&eol;];&eol;&eol;try {&eol;    var params = JSON.parse(value);&eol;&eol;    if (!params.teams_endpoint) {&eol;        throw 'Cannot get teams_endpoint';&eol;    }&eol;    else if (!params.teams_endpoint.startsWith('https://outlook.office.com/webhook/')) {&eol;        throw 'Invalid MS Teams webhook URL: ' + params.teams_endpoint;&eol;    }&eol;&eol;    params.zabbix_url = (params.zabbix_url.endsWith('/'))&eol;        ? params.zabbix_url.slice(0, -1) : params.zabbix_url;&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: "' + params.event_source + '".\nMust be 0-3.';&eol;    }&eol;&eol;    // Set "use_default_message" to true for non trigger-based events.&eol;    if (params.event_source !== '0') {&eol;        params.use_default_message = 'true';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: "' + params.event_value + '".\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_update_status !== '0' && params.event_update_status !== '1' && params.event_source === '0') {&eol;        throw 'Incorrect "event_update_status" parameter given: "' + params.event_update_status + '".\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_value == 0) {&eol;        params.event_nseverity = '6';&eol;    }&eol;&eol;    if (!SEVERITY_COLORS[params.event_nseverity]) {&eol;        params.event_nseverity = '7';&eol;    }&eol;&eol;    var request = new CurlHttpRequest(),&eol;        facts = [],&eol;        body = {&eol;            themeColor: SEVERITY_COLORS[params.event_nseverity].replace('#', ''),&eol;            summary: 'Zabbix',&eol;            sections: [&eol;                {&eol;                    markdown: 'false',&eol;                    activityTitle: params.alert_subject,&eol;                    activitySubtitle: 'On ' + params.host_name + ' [' + params.host_ip + ']',&eol;                    text: (params.use_default_message.toLowerCase() == 'true')&eol;                        ? params.alert_message&eol;                        : params.trigger_description&eol;                }&eol;            ],&eol;            potentialAction: [&eol;                {&eol;                    '@type': 'OpenUri',&eol;                    name: (params.event_source === '0')&eol;                        ? 'Event Info'&eol;                        : 'Zabbix Home',&eol;                    targets: [&eol;                        {&eol;                            os: 'default',&eol;                            uri: (params.event_source === '0')&eol;                                ? params.zabbix_url + '/tr_events.php?triggerid=' +&eol;                                    params.trigger_id + '&eventid=' + params.event_id&eol;                                : params.zabbix_url&eol;                        }&eol;                    ]&eol;                }&eol;            ]&eol;        };&eol;&eol;    if (params.use_default_message.toLowerCase() !== 'true') {&eol;        // Problem message.&eol;        if (params.event_value === '1' && params.event_update_status === '0') {&eol;            facts.push({&eol;                name: 'Event time',&eol;                value: params.event_time + ' ' + params.event_date&eol;            });&eol;        }&eol;        // Update message.&eol;        else if (params.event_update_status === '1') {&eol;            body.sections[0].text = params.event_update_user + ' ' + params.event_update_action + '.';&eol;&eol;            if (params.event_update_message) {&eol;                body.sections[0].text += '<br>Message:<br>' + params.event_update_message;&eol;            }&eol;&eol;            facts.push({&eol;                name: 'Event update time',&eol;                value: params.event_update_time + ' ' + params.event_update_date&eol;            });&eol;        }&eol;        // Resolved message.&eol;        else {&eol;            facts.push({&eol;                name: 'Recovery time',&eol;                value: params.event_recovery_time + ' ' + params.event_recovery_date&eol;            });&eol;        }&eol;&eol;        if (params.event_severity && params.event_severity !== '{EVENT.SEVERITY}') {&eol;            facts.push({&eol;                name: 'Severity',&eol;                value: params.event_severity&eol;            });&eol;        }&eol;&eol;&eol;        if (params.event_opdata && params.event_opdata !== '{EVENT.OPDATA}') {&eol;            facts.push({&eol;                name: 'Operational data',&eol;                value: params.event_opdata&eol;            });&eol;        }&eol;&eol;        if (params.event_tags && params.event_tags !== '{EVENT.TAGS}') {&eol;            facts.push({&eol;                name: 'Event tags',&eol;                value: params.event_tags&eol;            });&eol;        }&eol;&eol;        Object.keys(params)&eol;            .forEach(function (key) {&eol;                if (key.startsWith('fact_') && params[key] !== '') {&eol;                    facts.push({&eol;                        name: key.substring(5),&eol;                        value: params[key]&eol;                    });&eol;                }&eol;                else if (key.startsWith('openUri_') && params[key] !== '' && !params[key].startsWith('{')) {&eol;                    body.potentialAction.push({&eol;                        '@type': 'OpenUri',&eol;                        name: key.substring(8),&eol;                        targets: [&eol;                            {&eol;                                os: 'default',&eol;                                uri: params[key]&eol;                            }&eol;                        ]&eol;                    });&eol;                }&eol;            });&eol;        body.sections[0].facts = facts;&eol;    }&eol;&eol;    body.sections[0].text = body.sections[0].text.replace(/(?:\r\n&pipe;\r&pipe;\n)/g, '<br>');&eol;&eol;    request.AddHeader('Content-Type: application/json');&eol;&eol;    if (typeof params.HTTPProxy === 'string' && params.HTTPProxy !== '') {&eol;        request.SetProxy(params.HTTPProxy);&eol;    }&eol;&eol;    Zabbix.Log(4, '[ MS Teams Webhook ] JSON: ' + JSON.stringify(body));&eol;&eol;    var response = request.Post(params.teams_endpoint, JSON.stringify(body));&eol;&eol;    Zabbix.Log(4, '[ MS Teams Webhook ] Response: ' + response);&eol;&eol;    if (response === '1') {&eol;        return 'OK';&eol;    }&eol;    else {&eol;        Zabbix.Log(4, '[ MS Teams Webhook ] FAILED with response: ' + response);&eol;        throw response;&eol;    }&eol;}&eol;catch (error) {&eol;    Zabbix.Log(3, '[ MS Teams Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |0           |0              |                                      |                                                          ||
ROW   |15         |4   |Redmine               |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |var Redmine = {&eol;    params: {},&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        Redmine.params = params;&eol;        if (typeof Redmine.params.url === 'string') {&eol;            if (!Redmine.params.url.endsWith('/')) {&eol;                Redmine.params.url += '/';&eol;            }&eol;        }&eol;    },&eol;&eol;    addCustomFields: function (data, fields) {&eol;        if (typeof fields === 'object' && Object.keys(fields).length) {&eol;            var schema = Redmine.getSchema();&eol;&eol;            if (schema) {&eol;                data.issue.custom_fields = [];&eol;&eol;                Object.keys(fields)&eol;                    .forEach(function(field) {&eol;                        for (var idx in schema.custom_fields) {&eol;                            if (schema.custom_fields[idx].id != field) {&eol;                                continue;&eol;                            }&eol;&eol;                            var field_value;&eol;&eol;                            switch (schema.custom_fields[idx].field_format) {&eol;                                case 'string':&eol;                                    field_value = fields[field];&eol;                                    break;&eol;&eol;                                case 'int':&eol;                                    field_value = parseInt(fields[field]);&eol;                                    break;&eol;&eol;                                case 'float':&eol;                                    field_value = parseFloat(fields[field]);&eol;                                    break;&eol;&eol;                                case 'date':&eol;                                    if (fields[field].match(/^\d{4}[.-]\d{2}[.-]\d{2}$/)) {&eol;                                        field_value = fields[field].replace(/\./g, '-');&eol;                                    }&eol;                                    break;&eol;                            }&eol;&eol;                            if (field_value !== undefined) {&eol;                                data.issue.custom_fields.push({id: field, value: field_value});&eol;                            }&eol;                        }&eol;                    });&eol;            }&eol;            else {&eol;                Zabbix.Log(4, '[ Redmine Webhook ] Failed to retrieve field schema.');&eol;            }&eol;        }&eol;&eol;        return data;&eol;    },&eol;&eol;    request: function (method, query, data) {&eol;        ['url', 'access_key'].forEach(function (field) {&eol;            if (typeof Redmine.params !== 'object' &pipe;&pipe; typeof Redmine.params[field] === 'undefined'&eol;                &pipe;&pipe; Redmine.params[field] === '' ) {&eol;                throw 'Required param is not set: "' + field + '".';&eol;            }&eol;        });&eol;&eol;        var response,&eol;            url = Redmine.params.url + query,&eol;            request = new CurlHttpRequest();&eol;&eol;        if (typeof Redmine.HTTPProxy === 'string' && Redmine.HTTPProxy.trim() !== '') {&eol;            request.SetProxy(Redmine.HTTPProxy);&eol;        }&eol;&eol;        request.AddHeader('Content-Type: application/json');&eol;        request.AddHeader('X-Redmine-API-Key: ' + Redmine.params.access_key);&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.Log(4, '[ Redmine Webhook ] Sending request: ' +&eol;            url + ((typeof data === 'string') ? (' ' + data) : ''));&eol;&eol;        switch (method) {&eol;            case 'get':&eol;                response = request.Get(url, data);&eol;                break;&eol;&eol;            case 'post':&eol;                response = request.Post(url, data);&eol;                break;&eol;&eol;            case 'put':&eol;                response = request.Put(url, data);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.Log(4, '[ Redmine Webhook ] Received response with status code ' + request.Status() + ': ' + response);&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.Log(4, '[ Redmine Webhook ] Failed to parse response received from Redmine');&eol;                response = null;&eol;            }&eol;        }&eol;&eol;        if (request.Status() < 200 &pipe;&pipe; request.Status() >= 300) {&eol;            var message = 'Request failed with status code ' + request.Status();&eol;&eol;            if (response !== null && typeof response.errors !== 'undefined'&eol;                && Object.keys(response.errors).length > 0) {&eol;                message += ': ' + JSON.stringify(response.errors);&eol;            }&eol;            else if (response !== null && typeof response.errorMessages !== 'undefined'&eol;                && Object.keys(response.errorMessages).length > 0) {&eol;                message += ': ' + JSON.stringify(response.errorMessages);&eol;            }&eol;&eol;            throw message + ' Check debug log for more information.';&eol;        }&eol;&eol;        return {&eol;            status: request.Status(),&eol;            response: response&eol;        };&eol;    },&eol;&eol;    getProjectID: function(name) {&eol;        var result = Redmine.request('get', 'projects.json'),&eol;            project_id;&eol;&eol;        if (result.response) {&eol;            var projects = result.response.projects &pipe;&pipe; [];&eol;&eol;            for (var i in projects) {&eol;                if (projects[i].name === name) {&eol;                    project_id = projects[i].id;&eol;                    break;&eol;                }&eol;            }&eol;        }&eol;        else {&eol;            Zabbix.Log(4, '[ Redmine Webhook ] Failed to retrieve project data.');&eol;        }&eol;&eol;        if (typeof project_id === 'undefined') {&eol;            throw 'Cannot find project with name: ' + name;&eol;        }&eol;&eol;        return project_id;&eol;    },&eol;&eol;    getSchema: function() {&eol;        var result = Redmine.request('get', 'custom_fields.json');&eol;&eol;        return result.response;&eol;    },&eol;&eol;    createIssue: function(subject, description, priority, fields) {&eol;        var project_id = /^\d+$/.test(Redmine.params.project)&eol;                ? Redmine.params.project&eol;                : Redmine.getProjectID(Redmine.params.project),&eol;            data = {&eol;                issue: {&eol;                    project_id: project_id,&eol;                    tracker_id: Redmine.params.tracker_id,&eol;                    subject: subject,&eol;                    description: description&eol;                }&eol;            },&eol;            result;&eol;&eol;        if (priority) {&eol;            data.issue.priority_id = priority;&eol;        }&eol;&eol;        result = Redmine.request('post', 'issues.json', Redmine.addCustomFields(data, fields));&eol;&eol;        if (typeof result.response !== 'object'&eol;            &pipe;&pipe; typeof result.response.issue.id === 'undefined'&eol;            &pipe;&pipe; result.status != 201) {&eol;            throw 'Cannot create Redmine issue. Check debug log for more information.';&eol;        }&eol;&eol;        return result.response.issue.id;&eol;    },&eol;&eol;    updateIssue: function(note, fields) {&eol;        var data = {&eol;            issue: {&eol;                notes: note &pipe;&pipe; ''&eol;            }&eol;        };&eol;&eol;        Redmine.request('put', 'issues/' + Redmine.params.issue_key + '.json', Redmine.addCustomFields(data, fields));&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        params_redmine = {},&eol;        params_fields = {},&eol;        params_update = {},&eol;        result = {tags: {}},&eol;        required_params = [&eol;            'alert_subject', 'tracker_id', 'project',&eol;            'event_source', 'event_value',  'event_update_status'&eol;        ],&eol;        severities = [&eol;            {name: 'not_classified', color: '#97AAB3'},&eol;            {name: 'information', color: '#7499FF'},&eol;            {name: 'warning', color: '#FFC859'},&eol;            {name: 'average', color: '#FFA059'},&eol;            {name: 'high', color: '#E97659'},&eol;            {name: 'disaster', color: '#E45959'},&eol;            {name: 'resolved', color: '#009900'},&eol;            {name: null, color: '#000000'}&eol;        ],&eol;        priority;&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('redmine_')) {&eol;                params_redmine[key.substring(8)] = params[key];&eol;            }&eol;            else if (key.startsWith('customfield_')) {&eol;                params_fields[key.substring(12)] = params[key];&eol;            }&eol;            else if (key.startsWith('event_update_')) {&eol;                params_update[key.substring(13)] = params[key];&eol;            }&eol;            else if (required_params.indexOf(key) !== -1 && params[key].trim() === '') {&eol;                throw 'Parameter "' + key + '" cannot be empty.';&eol;            }&eol;        });&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_source === '0' && params.event_update_status !== '0' && params.event_update_status !== '1') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_source !== '0' && params.event_value === '0') {&eol;        throw 'Recovery operations are supported only for trigger-based actions.';&eol;    }&eol;&eol;    if (params.event_source === '0'&eol;        && ((params.event_value === '1' && params.event_update_status === '1')&eol;            &pipe;&pipe; (params.event_value === '0'&eol;                && (params.event_update_status === '0' &pipe;&pipe; params.event_update_status === '1')))&eol;        && (isNaN(parseInt(params.redmine_issue_key)) &pipe;&pipe; parseInt(params.redmine_issue_key) < 1 )) {&eol;        throw 'Incorrect "redmine_issue_key" parameter given: ' + params.redmine_issue_key +&eol;            '\nMust be positive integer.';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        params.event_nseverity = '7';&eol;    }&eol;&eol;    if (params.event_value === '0') {&eol;        params.event_nseverity = '6';&eol;    }&eol;&eol;    priority = params['severity_' + severities[params.event_nseverity].name];&eol;    priority = priority && priority.trim() &pipe;&pipe; severities[7].name;&eol;&eol;    Redmine.setParams(params_redmine);&eol;    Redmine.HTTPProxy = params.HTTPProxy;&eol;&eol;    // Create issue for non trigger-based events.&eol;    if (params.event_source !== '0'&eol;        && params.event_value !== '0') {&eol;        Redmine.createIssue(params.alert_subject, params.alert_message, priority);&eol;    }&eol;    // Create issue for trigger-based events.&eol;    else if (params.event_value === '1' && params_update.status === '0') {&eol;        var issue_id = Redmine.createIssue(params.alert_subject,&eol;            params.alert_subject + '\n' + params.alert_message + '\n' +&eol;            params.zabbix_url + (params.zabbix_url.endsWith('/') ? '' : '/') +&eol;            'tr_events.php?triggerid=' + params.trigger_id + '&eventid=' + params.event_id + '\n',&eol;            priority,&eol;            params_fields);&eol;&eol;        result.tags.__zbx_redmine_issue_id = issue_id;&eol;        result.tags.__zbx_redmine_issuelink = params.redmine_url +&eol;            (params.redmine_url.endsWith('/') ? '' : '/') + 'issues/' + issue_id;&eol;    }&eol;    // Update created issue for trigger-based event.&eol;    else {&eol;        Redmine.updateIssue(params.alert_subject + '\n' + params.alert_message, params_fields);&eol;    }&eol;&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.Log(3, '[ Redmine Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_redmine_issuelink}  |Redmine: issue #{EVENT.TAGS.__zbx_redmine_issue_id}       ||
ROW   |16         |4   |Telegram              |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |var Telegram = {&eol;    token: null,&eol;    to: null,&eol;    message: null,&eol;    proxy: null,&eol;    parse_mode: null,&eol;&eol;    sendMessage: function() {&eol;        var params = {&eol;            chat_id: Telegram.to,&eol;            text: Telegram.message,&eol;            disable_web_page_preview: true,&eol;            disable_notification: false&eol;        },&eol;        data,&eol;        response,&eol;        request = new CurlHttpRequest(),&eol;        url = 'https://api.telegram.org/bot' + Telegram.token + '/sendMessage';&eol;&eol;        if (Telegram.parse_mode !== null) {&eol;            params['parse_mode'] = Telegram.parse_mode;&eol;        }&eol;&eol;        if (Telegram.proxy) {&eol;            request.SetProxy(Telegram.proxy);&eol;        }&eol;&eol;        request.AddHeader('Content-Type: application/json');&eol;        data = JSON.stringify(params);&eol;&eol;        // Remove replace() function if you want to see the exposed token in the log file.&eol;        Zabbix.Log(4, '[Telegram Webhook] URL: ' + url.replace(Telegram.token, '<TOKEN>'));&eol;        Zabbix.Log(4, '[Telegram Webhook] params: ' + data);&eol;        response = request.Post(url, data);&eol;        Zabbix.Log(4, '[Telegram Webhook] HTTP code: ' + request.Status());&eol;&eol;        try {&eol;            response = JSON.parse(response);&eol;        }&eol;        catch (error) {&eol;            response = null;&eol;        }&eol;&eol;        if (request.Status() !== 200 &pipe;&pipe; typeof response.ok !== 'boolean' &pipe;&pipe; response.ok !== true) {&eol;            if (typeof response.description === 'string') {&eol;                throw response.description;&eol;            }&eol;            else {&eol;                throw 'Unknown error. Check debug log for more information.'&eol;            }&eol;        }&eol;    }&eol;}&eol;&eol;try {&eol;    var params = JSON.parse(value);&eol;&eol;    if (typeof params.Token === 'undefined') {&eol;        throw 'Incorrect value is given for parameter "Token": parameter is missing';&eol;    }&eol;&eol;    Telegram.token = params.Token;&eol;&eol;    if (params.HTTPProxy) {&eol;        Telegram.proxy = params.HTTPProxy;&eol;    } &eol;&eol;    if (['Markdown', 'HTML', 'MarkdownV2'].indexOf(params.ParseMode) !== -1) {&eol;        Telegram.parse_mode = params.ParseMode;&eol;    }&eol;&eol;    Telegram.to = params.To;&eol;    Telegram.message = params.Subject + '\n' + params.Message;&eol;    Telegram.sendMessage();&eol;&eol;    return 'OK';&eol;}&eol;catch (error) {&eol;    Zabbix.Log(4, '[Telegram Webhook] notification failed: ' + error);&eol;    throw 'Sending failed: ' + error + '.';&eol;}|10s    |0           |0              |                                      |                                                          |https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/telegram&eol;&eol;1. Register bot: send "/newbot" to @BotFather and follow instructions&eol;2. Copy and paste the obtained token into the "Token" field above&eol;3. If you want to send personal notifications, you need to get chat id of the user you want to send messages to:&eol;    3.1. Send "/getid" to "@myidbot" in Telegram messenger&eol;    3.2. Copy returned chat id and save it in the "Telegram Webhook" media for the user&eol;    3.3. Ask the user to send "/start" to your bot (Telegram bot won't send anything to the user without it)&eol;4. If you want to send group notifications, you need to get group id of the group you want to send messages to:&eol;    4.1. Add "@myidbot" to your group&eol;    4.2. Send "/getgroupid@myidbot" in your group&eol;    4.3. Copy returned group id save it in the "Telegram Webhook" media for the user you created for  group notifications&eol;    4.4. Send "/start@your_bot_name_here" in your group (Telegram bot won't send anything to the group without it)|
ROW   |17         |4   |Zendesk               |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |var Zendesk = {&eol;    params: {},&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        Zendesk.params = params;&eol;        if (typeof Zendesk.params.url === 'string') {&eol;            if (!Zendesk.params.url.endsWith('/')) {&eol;                Zendesk.params.url += '/';&eol;            }&eol;            Zendesk.params.url += 'api/v2/';&eol;        }&eol;    },&eol;&eol;    addCustomFields: function (data, fields) {&eol;        if (typeof fields === 'object' && Object.keys(fields).length) {&eol;            var schema = Zendesk.getSchema(),&eol;                arr = [],&eol;                i,&eol;                n;&eol;&eol;            if (schema) {&eol;                Object.keys(fields)&eol;                    .forEach(function(field) {&eol;                        for (i = 0, n = schema.ticket_fields.length; i < n; i++) {&eol;                            if (schema.ticket_fields[i].id == field&eol;                                && ['text', 'integer', 'date'].indexOf(schema.ticket_fields[i].type) !== -1){&eol;&eol;                                switch (schema.ticket_fields[i].type) {&eol;                                    case 'integer':&eol;                                        fields[field] = parseInt(fields[field]);&eol;                                        break;&eol;                                    case 'date':&eol;                                        if (fields[field].match(/^\d{4}[.-]\d{2}[.-]\d{2}$/) !== null) {&eol;                                            fields[field] = fields[field].replace(/\./g, '-');&eol;                                        }&eol;                                        else {&eol;                                            fields[field] = '';&eol;                                        }&eol;                                        break;&eol;                                }&eol;&eol;                                arr.push({id: field, value: fields[field]});&eol;                                break;&eol;                            }&eol;                        }&eol;                    });&eol;&eol;                if (arr.length) {&eol;                    data.ticket['custom_fields'] = arr;&eol;                }&eol;            }&eol;            else {&eol;                Zabbix.Log(4, '[Zendesk Webhook] Failed to retrieve field schema.');&eol;            }&eol;        }&eol;&eol;        return data;&eol;    },&eol;&eol;    request: function (method, query, data) {&eol;        ['url', 'token', 'type'].forEach(function (field) {&eol;            if (typeof Zendesk.params !== 'object' &pipe;&pipe; typeof Zendesk.params[field] === 'undefined') {&eol;                throw 'Required Zendesk param is not set: ' + field + '\n' + Zendesk.params[field];&eol;            }&eol;        });&eol;&eol;        var response,&eol;            url = Zendesk.params.url + query,&eol;            request = new CurlHttpRequest();&eol;&eol;        if (typeof Zendesk.HTTPProxy === 'string' && Zendesk.HTTPProxy.trim() !== '') {&eol;            request.SetProxy(Zendesk.HTTPProxy);&eol;        }&eol;&eol;        request.AddHeader('Content-Type: application/json');&eol;        request.AddHeader('Authorization: Basic ' + btoa(Zendesk.params.token));&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.Log(4, '[Zendesk Webhook] Sending request: ' + url + ((typeof data === 'string') ? (' ' + data) : ''));&eol;&eol;        switch (method) {&eol;            case 'get':&eol;                response = request.Get(url, data);&eol;                break;&eol;&eol;            case 'post':&eol;                response = request.Post(url, data);&eol;                break;&eol;&eol;            case 'put':&eol;                response = request.Put(url, data);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.Log(4, '[Zendesk Webhook] Received response with status code ' + request.Status() + '. ' + response);&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.Log(4, '[Zendesk Webhook] Failed to parse response received from Zendesk.');&eol;            }&eol;        }&eol;&eol;        if (request.Status() < 200 &pipe;&pipe; request.Status() >= 300) {&eol;            var message = 'Request failed with status code ' + request.Status();&eol;&eol;            if (response !== null && typeof response.error !== 'undefined'&eol;                && Object.keys(response.error).length > 0) {&eol;                message += ': ' + JSON.stringify(response.error);&eol;            }&eol;            else if (response !== null && typeof response.description !== 'undefined'&eol;                && Object.keys(response.description).length > 0) {&eol;                message += ': ' + JSON.stringify(response.description);&eol;            }&eol;            else {&eol;                message += '. ' + response;&eol;            }&eol;            throw message + '. Check debug log for more information.';&eol;        }&eol;&eol;        return {&eol;            status: request.Status(),&eol;            response: response&eol;        };&eol;    },&eol;&eol;    getSchema: function() {&eol;        var result = Zendesk.request('get', 'ticket_fields.json');&eol;&eol;        return result.response;&eol;    },&eol;&eol;    createIssue: function(data, fields) {&eol;        var result = Zendesk.request('post', 'tickets.json', Zendesk.addCustomFields(data, fields));&eol;&eol;        if (typeof result.response !== 'object' &pipe;&pipe; typeof result.response.ticket.id === 'undefined'&eol;            &pipe;&pipe; result.status != 201) {&eol;            throw 'Cannot create Zendesk issue. Check debug log for more information.';&eol;        }&eol;&eol;        return result.response.ticket.id;&eol;    },&eol;&eol;    updateIssue: function(data, fields) {&eol;        Zendesk.request('put', 'tickets/' + Zendesk.params.issue_key + '.json', Zendesk.addCustomFields(data, fields));&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        fields = {},&eol;        zendesk = {},&eol;        update = {},&eol;        data = {},&eol;        result = {tags: {}},&eol;        required_params = [&eol;            'alert_subject',&eol;            'alert_message',&eol;            'event_id',&eol;            'event_source',&eol;            'event_value',&eol;            'event_update_status'&eol;        ],&eol;        severities = [&eol;            {name: 'not_classified', color: '#97AAB3'},&eol;            {name: 'information', color: '#7499FF'},&eol;            {name: 'warning', color: '#FFC859'},&eol;            {name: 'average', color: '#FFA059'},&eol;            {name: 'high', color: '#E97659'},&eol;            {name: 'disaster', color: '#E45959'},&eol;            {name: 'resolved', color: '#009900'},&eol;            {name: 'default', color: '#000000'}&eol;        ],&eol;        priority;&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('zendesk_')) {&eol;                zendesk[key.substring(8)] = params[key];&eol;            }&eol;            else if (key.startsWith('customfield_')) {&eol;                fields[key.substring(12)] = params[key];&eol;            }&eol;            else if (key.startsWith('event_update_')) {&eol;                update[key.substring(13)] = params[key];&eol;            }&eol;            else if (required_params.indexOf(key) !== -1 && params[key].trim() === '') {&eol;                throw 'Parameter ' + key + ' cannot be empty.';&eol;            }&eol;        });&eol;&eol;    // Possible values: question, incident, problems, task&eol;    if (['question', 'incident', 'problem', 'task'].indexOf(params.zendesk_type) === -1) {&eol;        throw 'Incorrect "zendesk_type" parameter given: ' + params.zendesk_type +&eol;            '\nMust be one of question, incident, problem, task.';&eol;    }&eol;&eol;    // Possible values: 0 - Trigger, 1 - Discovery, 2 - Autoregistration, 3 - Internal.&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    // Possible values: 1 for problem, 0 for recovering&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    // Possible values: 0 - Webhook was called because of problem/recovery event, 1 - Update operation.&eol;    if (params.event_source === '0' && params.event_update_status !== '0' && params.event_update_status !== '1') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_source !== '0' && params.event_value === '0') {&eol;        throw 'Recovery operations are supported only for trigger-based actions.';&eol;    }&eol;&eol;    // Zendesk_issue_key must be a positive integer if an update action is being performed.&eol;    if (params.event_source === '0' && ((params.event_value === '1' && params.event_update_status === '1')&eol;        &pipe;&pipe; (params.event_value === '0' && (params.event_update_status === '0' &pipe;&pipe; params.event_update_status === '1')))&eol;        && (isNaN(parseInt(params.zendesk_issue_key)) &pipe;&pipe; parseInt(params.zendesk_issue_key) < 1 )) {&eol;        throw 'Incorrect "zendesk_issue_key" parameter given: ' + params.zendesk_issue_key +&eol;            '\nMust be positive integer.';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        params.event_nseverity = '7';&eol;    }&eol;&eol;    if (params.event_value === '0') {&eol;        params.event_nseverity = '6';&eol;    }&eol;&eol;    priority = params['severity_' + severities[params.event_nseverity].name] &pipe;&pipe; severities[7].name;&eol;&eol;    Zendesk.setParams(zendesk);&eol;    Zendesk.HTTPProxy = params.HTTPProxy;&eol;&eol;    // Create issue for non trigger-based events.&eol;    if (params.event_source !== '0' && params.event_value !== '0') {&eol;        data = {&eol;            ticket: {&eol;                external_id: params.event_id,&eol;                type: Zendesk.params.type,&eol;                status: 'new',&eol;                subject: params.alert_subject,&eol;                comment: {&eol;                    body: params.alert_message,&eol;                    public: 'false'&eol;                },&eol;                priority: priority,&eol;                tags: params.event_tags&eol;            }&eol;        };&eol;&eol;        Zendesk.createIssue(data, fields);&eol;    }&eol;    // Create issue for trigger-based events.&eol;    else if (params.event_value === '1' && update.status === '0') {&eol;        data = {&eol;            ticket: {&eol;                external_id: params.event_id,&eol;                type: Zendesk.params.type,&eol;                status: 'new',&eol;                subject: params.alert_subject,&eol;                comment: {&eol;                    body: params.zbxurl + (params.zbxurl.endsWith('/') ? '' : '/') + 'tr_events.php?triggerid=' +&eol;                        params.trigger_id + '&eventid=' + params.event_id + '\n' + params.alert_message,&eol;                    public: 'false'&eol;                },&eol;                priority: priority,&eol;                tags: params.event_tags&eol;            }&eol;        };&eol;        var key = Zendesk.createIssue(data, fields);&eol;&eol;        result.tags.__zbx_zdk_issuekey = key;&eol;        result.tags.__zbx_zdk_issuelink = params.zendesk_url +&eol;            (params.zendesk_url.endsWith('/') ? '' : '/') + 'agent/tickets/' + key;&eol;    }&eol;    // Update created issue for trigger-based event.&eol;    else {&eol;        data = {&eol;            ticket: {&eol;                type: Zendesk.params.type,&eol;                subject: params.alert_subject,&eol;                comment: {&eol;                    body: params.alert_message,&eol;                    public: 'false'&eol;                }&eol;            }&eol;        };&eol;&eol;        Zendesk.updateIssue(data, fields);&eol;    }&eol;&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.Log(3, '[Zendesk Webhook] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_zdk_issuelink}      |Zendesk: {EVENT.TAGS.__zbx_zdk_issuekey}                  |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |18         |4   |ServiceNow            |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |var ServiceNow = {&eol;    params: {},&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        ServiceNow.params = params;&eol;        if (typeof ServiceNow.params.url === 'string') {&eol;            if (!ServiceNow.params.url.endsWith('/')) {&eol;                ServiceNow.params.url += '/';&eol;            }&eol;&eol;            ServiceNow.params.url += 'api/now/table/incident';&eol;        }&eol;    },&eol;&eol;    setProxy: function (HTTPProxy) {&eol;        ServiceNow.HTTPProxy = HTTPProxy;&eol;    },&eol;&eol;    setFields: function (data, fields) {&eol;        if (typeof fields === 'object' && Object.keys(fields).length) {&eol;            Object.keys(fields)&eol;                .forEach(function(field) {&eol;                    data[field] = (fields[field].match(/^\d{4}\.\d{2}\.\d{2}$/) !== null)&eol;                        ? fields[field].replace(/\./g, '-')&eol;                        : fields[field];&eol;                });&eol;        }&eol;    },&eol;&eol;    request: function (method, data) {&eol;        ['url', 'user', 'password'].forEach(function (field) {&eol;            if (typeof ServiceNow.params !== 'object' &pipe;&pipe; typeof ServiceNow.params[field] === 'undefined'&eol;                &pipe;&pipe; ServiceNow.params[field] === '' ) {&eol;                throw 'Required ServiceNow param is not set: "' + field + '".';&eol;            }&eol;        });&eol;&eol;        var response,&eol;            url = ServiceNow.params.url,&eol;            request = new CurlHttpRequest();&eol;&eol;        request.AddHeader('Content-Type: application/json');&eol;        request.AddHeader('Authorization: Basic ' + btoa(ServiceNow.params.user + ':' + ServiceNow.params.password));&eol;&eol;        if (typeof ServiceNow.HTTPProxy !== 'undefined' && ServiceNow.HTTPProxy !== '') {&eol;            request.SetProxy(ServiceNow.HTTPProxy);&eol;        }&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.Log(4, '[ ServiceNow Webhook ] Sending request: ' + url + ((typeof data === 'string')&eol;            ? ('\n' + data)&eol;            : ''));&eol;&eol;        switch (method) {&eol;            case 'get':&eol;                response = request.Get(url, data);&eol;                break;&eol;&eol;            case 'post':&eol;                response = request.Post(url, data);&eol;                break;&eol;&eol;            case 'put':&eol;                response = request.Put(url, data);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.Log(4, '[ ServiceNow Webhook ] Received response with status code ' +&eol;            request.Status() + '\n' + response);&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.Log(4, '[ ServiceNow Webhook ] Failed to parse response received from ServiceNow');&eol;                response = null;&eol;            }&eol;        }&eol;&eol;        if (request.Status() < 200 &pipe;&pipe; request.Status() >= 300) {&eol;            var message = 'Request failed with status code ' + request.Status();&eol;&eol;            if (response !== null && typeof response.error.message !== 'undefined'&eol;                && Object.keys(response.error).length > 0) {&eol;                message += ': ' + JSON.stringify(response.error.message);&eol;            }&eol;&eol;            throw message + ' Check debug log for more information.';&eol;        }&eol;        else if (typeof response.result !== 'object' &pipe;&pipe; typeof response.result.sys_id === 'undefined') {&eol;            throw 'Cannot create ServiceNow incident. Check debug log for more information.';&eol;        }&eol;&eol;        return response.result;&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        fields = {},&eol;        servicenow = {},&eol;        data = {},&eol;        result = {tags: {}},&eol;        required_params = [&eol;            'alert_subject', 'alert_message', 'event_source', 'event_value',&eol;            'event_update_status', 'event_recovery_value', 'event_nseverity'&eol;        ],&eol;        severities = [&eol;            {name: 'not_classified', color: '#97AAB3'},&eol;            {name: 'information', color: '#7499FF'},&eol;            {name: 'warning', color: '#FFC859'},&eol;            {name: 'average', color: '#FFA059'},&eol;            {name: 'high', color: '#E97659'},&eol;            {name: 'disaster', color: '#E45959'},&eol;            {name: 'resolved', color: '#009900'},&eol;            {name: 'default', color: '#000000'}&eol;        ],&eol;        method = 'post',&eol;        process_tags = true;&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('servicenow_')) {&eol;                servicenow[key.substring(11)] = params[key];&eol;            }&eol;            else if (key.startsWith('u_')) {&eol;                fields[key] = params[key];&eol;            }&eol;            else if (required_params.indexOf(key) !== -1 && params[key] === '') {&eol;                throw 'Parameter "' + key + '" can\'t be empty.';&eol;            }&eol;        });&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        params.event_nseverity = '7';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_update_status !== '0' && params.event_update_status !== '1' && params.event_source === '0') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_source !== '0' && params.event_recovery_value === '0') {&eol;        throw 'Recovery operations are supported only for trigger-based actions.';&eol;    }&eol;&eol;    data.short_description = params.alert_subject;&eol;    data.description = params.alert_message;&eol;&eol;    if (typeof params['urgency_for_' + severities[params.event_nseverity].name] !== 'undefined') {&eol;        data.urgency = params['urgency_for_' + severities[params.event_nseverity].name];&eol;    }&eol;&eol;    ServiceNow.setParams(servicenow);&eol;    ServiceNow.setProxy(params.HTTPProxy);&eol;    ServiceNow.setFields(data, fields);&eol;&eol;    if (params.event_source === '0' && (params.event_value === '0' &pipe;&pipe; params.event_update_status === '1')) {&eol;        process_tags = false;&eol;        method = 'put';&eol;        delete data.description;&eol;        delete data.urgency;&eol;        ServiceNow.params.url += '/' + params.servicenow_sys_id;&eol;        data.comments = params.alert_message;&eol;    }&eol;&eol;    var response = ServiceNow.request(method, data);&eol;&eol;    if (process_tags) {&eol;        result.tags.__zbx_servicenow_sys_id = response.sys_id;&eol;        result.tags.__zbx_servicenow_link = params.servicenow_url +&eol;            (params.servicenow_url.endsWith('/') ? '' : '/') + 'incident.do?sys_id=' + response.sys_id;&eol;        result.tags.__zbx_servicenow_number = response.number;&eol;    }&eol;&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.Log(3, '[ ServiceNow Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_servicenow_link}    |ServiceNow: {EVENT.TAGS.__zbx_servicenow_number}          ||
ROW   |19         |4   |Zammad                |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |var Zammad = {&eol;    params: {},&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        Zammad.params = params;&eol;        if (typeof Zammad.params.url === 'string') {&eol;            if (!Zammad.params.url.endsWith('/')) {&eol;                Zammad.params.url += '/';&eol;            }&eol;        }&eol;    },&eol;&eol;    request: function (method, query, data) {&eol;        ['url', 'access_token'].forEach(function (field) {&eol;            if (typeof Zammad.params !== 'object' &pipe;&pipe; typeof Zammad.params[field] === 'undefined'&eol;                &pipe;&pipe; Zammad.params[field] === '' ) {&eol;                throw 'Required param is not set: "' + field + '".';&eol;            }&eol;        });&eol;&eol;        var response,&eol;            url = Zammad.params.url + query,&eol;            request = new CurlHttpRequest();&eol;&eol;        if (typeof Zammad.HTTPProxy === 'string' && Zammad.HTTPProxy.trim() !== '') {&eol;            request.SetProxy(Zammad.HTTPProxy);&eol;        }&eol;&eol;        request.AddHeader('Content-Type: application/json');&eol;        request.AddHeader('Authorization: Token token=' + Zammad.params.access_token);&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.Log(4, '[ Zammad Webhook ] Sending request: ' +&eol;            url + ((typeof data === 'string') ? (' ' + data) : ''));&eol;&eol;        switch (method) {&eol;            case 'get':&eol;                response = request.Get(url, data);&eol;                break;&eol;&eol;            case 'post':&eol;                response = request.Post(url, data);&eol;                break;&eol;&eol;            case 'put':&eol;                response = request.Put(url, data);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.Log(4, '[ Zammad Webhook ] Received response with status code ' + request.Status() + ': ' + response);&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.Log(4, '[ Zammad Webhook ] Failed to parse response received from Zammad');&eol;                response = null;&eol;            }&eol;        }&eol;&eol;        if (request.Status() < 200 &pipe;&pipe; request.Status() >= 300) {&eol;            var message = 'Request failed with status code ' + request.Status();&eol;&eol;            if (response !== null && typeof response.errors !== 'undefined'&eol;                && Object.keys(response.errors).length > 0) {&eol;                message += ': ' + JSON.stringify(response.errors);&eol;            }&eol;            else if (response !== null && typeof response.errorMessages !== 'undefined'&eol;                && Object.keys(response.errorMessages).length > 0) {&eol;                message += ': ' + JSON.stringify(response.errorMessages);&eol;            }&eol;&eol;            throw message + ' Check debug log for more information.';&eol;        }&eol;&eol;        return {&eol;            status: request.Status(),&eol;            response: response&eol;        };&eol;    },&eol;&eol;    setTicketTags: function(tags, ticket_id) {&eol;        try {&eol;            var tags_json = JSON.parse(tags),&eol;                result;&eol;&eol;            for (var i in tags_json) {&eol;                result = Zammad.request('get',&eol;                    '/api/v1/tags/add?object=Ticket&o_id=' + ticket_id +&eol;                    '&item=' + tags_json[i].tag);&eol;&eol;                if (typeof result.response !== 'object'&eol;                    &pipe;&pipe; result.status != 200) {&eol;                    Zabbix.Log(4, '[ Zammad Webhook ] Cannot add ticket tag:' + tags_json[i].tag);&eol;                }&eol;            }&eol;        }&eol;        catch (error) {&eol;            Zabbix.Log(4, '[ Zammad Webhook ] Failed to add ticket tags:' + error);&eol;        }&eol;&eol;        return;&eol;    },&eol;&eol;    createTicket: function(subject, message, priority) {&eol;        var data = {&eol;                title: subject,&eol;                group: 'Users',&eol;                article: {&eol;                    subject: subject,&eol;                    body: message,&eol;                    type: 'note',&eol;                    internal: false&eol;                },&eol;                customer: Zammad.params.customer&eol;            },&eol;            result;&eol;&eol;        if (priority) {&eol;            data.priority_id = priority;&eol;        }&eol;&eol;        result = Zammad.request('post', 'api/v1/tickets', data);&eol;&eol;        if (typeof result.response !== 'object'&eol;            &pipe;&pipe; typeof result.response.id === 'undefined'&eol;            &pipe;&pipe; result.status != 201) {&eol;            throw 'Cannot create Zammad ticket. Check debug log for more information.';&eol;        }&eol;&eol;        return result.response.id;&eol;    },&eol;&eol;    updateTicket: function(subject, message) {&eol;        var data = {&eol;            ticket_id: Zammad.params.ticket_id,&eol;            subject: subject,&eol;            body: message &pipe;&pipe; '',&eol;            type: 'note',&eol;            internal: false&eol;        };&eol;&eol;        result = Zammad.request('post', 'api/v1/ticket_articles', data);&eol;&eol;        if (typeof result.response !== 'object'&eol;            &pipe;&pipe; typeof result.response.id === 'undefined'&eol;            &pipe;&pipe; result.status != 201) {&eol;            throw 'Cannot update Zammad ticket. Check debug log for more information.';&eol;        }&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        params_zammad = {},&eol;        params_update = {},&eol;        result = {tags: {}},&eol;        required_params = [&eol;            'alert_subject', 'customer',&eol;            'event_source', 'event_value',&eol;            'event_update_status'&eol;        ],&eol;        severities = [&eol;            {name: 'not_classified', color: '#97AAB3'},&eol;            {name: 'information', color: '#7499FF'},&eol;            {name: 'warning', color: '#FFC859'},&eol;            {name: 'average', color: '#FFA059'},&eol;            {name: 'high', color: '#E97659'},&eol;            {name: 'disaster', color: '#E45959'},&eol;            {name: 'resolved', color: '#009900'},&eol;            {name: null, color: '#000000'}&eol;        ],&eol;        priority;&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('zammad_')) {&eol;                params_zammad[key.substring(7)] = params[key].trim();&eol;            }&eol;            else if (key.startsWith('event_update_')) {&eol;                params_update[key.substring(13)] = params[key];&eol;            }&eol;            else if (required_params.indexOf(key) !== -1 && params[key].trim() === '') {&eol;                throw 'Parameter "' + key + '" cannot be empty.';&eol;            }&eol;        });&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_source === '0' && params.event_update_status !== '0' && params.event_update_status !== '1') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_source !== '0' && params.event_value === '0') {&eol;        throw 'Recovery operations are supported only for trigger-based actions.';&eol;    }&eol;&eol;    if (params.event_source === '0'&eol;        && ((params.event_value === '1' && params.event_update_status === '1')&eol;            &pipe;&pipe; (params.event_value === '0'&eol;                && (params.event_update_status === '0' &pipe;&pipe; params.event_update_status === '1')))&eol;        && (isNaN(parseInt(params.zammad_ticket_id)) &pipe;&pipe; parseInt(params.zammad_ticket_id) < 1 )) {&eol;        throw 'Incorrect "zammad_ticket_id" parameter given: ' + params.zammad_ticket_id +&eol;            '\nMust be positive integer.';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        params.event_nseverity = '7';&eol;    }&eol;&eol;    if (params.event_value === '0') {&eol;        params.event_nseverity = '6';&eol;    }&eol;&eol;    priority = params['severity_' + severities[params.event_nseverity].name];&eol;    priority = priority && priority.trim() &pipe;&pipe; severities[7].name;&eol;&eol;    Zammad.setParams(params_zammad);&eol;    Zammad.HTTPProxy = params.HTTPProxy;&eol;&eol;    // Create ticket for non trigger-based events.&eol;    if (params.event_source !== '0'&eol;        && params.event_value !== '0') {&eol;        Zammad.createTicket(params.alert_subject, params.alert_message, priority, params.event_tags);&eol;    }&eol;    // Create ticket for trigger-based events.&eol;    else if (params.event_value === '1' && params_update.status === '0') {&eol;        var ticket_id = Zammad.createTicket(params.alert_subject,&eol;            params.alert_subject + '\n' + params.alert_message + '\n' +&eol;            params.zabbix_url + (params.zabbix_url.endsWith('/') ? '' : '/') +&eol;            'tr_events.php?triggerid=' + params.trigger_id + '&eventid=' + params.event_id + '\n',&eol;            priority);&eol;&eol;        result.tags.__zbx_zammad_ticket_id = ticket_id;&eol;        result.tags.__zbx_zammad_ticketlink = params.zammad_url +&eol;            (params.zammad_url.endsWith('/') ? '' : '/') + '#ticket/zoom/' + ticket_id;&eol;&eol;        if (Zammad.params.enable_tags.toLowerCase() === 'true') {&eol;            Zammad.setTicketTags(params.event_tags, ticket_id);&eol;        }&eol;    }&eol;    // Update created ticket for trigger-based event.&eol;    else {&eol;        Zammad.updateTicket(params.alert_subject, params.alert_message);&eol;    }&eol;&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.Log(3, '[ Zammad Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_zammad_ticketlink}  |Zammad: ticket #{EVENT.TAGS.__zbx_zammad_ticket_id}       |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |20         |4   |Jira ServiceDesk      |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |var Jira = {&eol;    params: {},&eol;    schema: {},&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        Jira.params = params;&eol;        if (typeof Jira.params.url === 'string') {&eol;            if (!Jira.params.url.endsWith('/')) {&eol;                Jira.params.url += '/';&eol;            }&eol;&eol;            Jira.params.url += 'rest/servicedeskapi/latest/';&eol;        }&eol;    },&eol;&eol;    setProxy: function (HTTPProxy) {&eol;        Jira.HTTPProxy = HTTPProxy;&eol;    },&eol;&eol;    setTags: function(event_tags_json) {&eol;        if (!Jira.schema) {&eol;            Zabbix.Log(4, '[ Jira Service Desk Webhook ] Cannot add labels because failed to retrieve field schema.');&eol;&eol;            return;&eol;        }&eol;&eol;        var block = Jira.schema.requestTypeFields.filter(function(object) {&eol;            return object.fieldId == 'labels';&eol;        });&eol;&eol;        if (block[0] && typeof event_tags_json !== 'undefined' && event_tags_json !== ''&eol;            && event_tags_json !== '{EVENT.TAGSJSON}') {&eol;            try {&eol;                var tags = JSON.parse(event_tags_json),&eol;                    label;&eol;&eol;                Jira.labels = [];&eol;&eol;                tags.forEach(function (tag) {&eol;                    if (typeof tag.tag !== 'undefined' && typeof tag.value !== 'undefined' ) {&eol;                        label = (tag.tag + (tag.value ? (':' + tag.value) : '')).replace(/\s/g, '_');&eol;                        if (label.length < 255) {&eol;                            Jira.labels.push(label);&eol;                        }&eol;                    }&eol;                });&eol;            }&eol;            catch (error) {&eol;                // Code is not missing here.&eol;            }&eol;        }&eol;    },&eol;&eol;    addCustomFields: function (data, fields) {&eol;        if (typeof fields === 'object' && Object.keys(fields).length) {&eol;            if (Jira.schema) {&eol;                Object.keys(fields)&eol;                    .forEach(function(field) {&eol;                        data.requestFieldValues[field] = fields[field];&eol;&eol;                        var block = Jira.schema.requestTypeFields.filter(function(object) {&eol;                            return object.fieldId == field;&eol;                        });&eol;&eol;                        if (typeof block[0] === 'object' && typeof block[0].jiraSchema === 'object'&eol;                            && (block[0].jiraSchema.type === 'number' &pipe;&pipe; block[0].jiraSchema.type === 'datetime')) {&eol;                            switch (block[0].jiraSchema.type) {&eol;                                case 'number':&eol;                                    data.requestFieldValues[field] = parseInt(fields[field]);&eol;                                    break;&eol;&eol;                                case 'datetime':&eol;                                    if (fields[field].match(/\d+[.-]\d+[.-]\d+T\d+:\d+:\d+/) !== null) {&eol;                                        data.requestFieldValues[field] = fields[field].replace(/\./g, '-');&eol;                                    }&eol;                                    else {&eol;                                        delete data.requestFieldValues[field];&eol;                                    }&eol;                                    break;&eol;                            }&eol;                        }&eol;                    });&eol;            }&eol;            else {&eol;                Zabbix.Log(4, '[ Jira Service Desk Webhook ] Cannot add custom fields' +&eol;                    'because failed to retrieve field schema.');&eol;            }&eol;        }&eol;&eol;        return data;&eol;    },&eol;&eol;    request: function (method, query, data) {&eol;        ['url', 'user', 'password', 'servicedesk_id', 'request_type_id'].forEach(function (field) {&eol;            if (typeof Jira.params !== 'object' &pipe;&pipe; typeof Jira.params[field] === 'undefined'&eol;                &pipe;&pipe; Jira.params[field] === '' ) {&eol;                throw 'Required Jira param is not set: "' + field + '".';&eol;            }&eol;        });&eol;&eol;        var response,&eol;            url = Jira.params.url + query,&eol;            request = new CurlHttpRequest();&eol;&eol;        request.AddHeader('Content-Type: application/json');&eol;        request.AddHeader('Authorization: Basic ' + btoa(Jira.params.user + ':' + Jira.params.password));&eol;        request.AddHeader('X-ExperimentalApi: opt-in');&eol;&eol;        if (typeof Jira.HTTPProxy !== 'undefined' && Jira.HTTPProxy !== '') {&eol;            request.SetProxy(Jira.HTTPProxy);&eol;        }&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.Log(4, '[ Jira Service Desk Webhook ] Sending request: ' + url +&eol;            ((typeof data === 'string') ? ('\n' + data) : ''));&eol;&eol;        switch (method) {&eol;            case 'get':&eol;                response = request.Get(url, data);&eol;                break;&eol;&eol;            case 'post':&eol;                response = request.Post(url, data);&eol;                break;&eol;&eol;            case 'put':&eol;                response = request.Put(url, data);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.Log(4, '[ Jira Service Desk Webhook ] Received response with status code ' +&eol;            request.Status() + '\n' + response);&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.Log(4, '[ Jira Service Desk Webhook ] Failed to parse response received from Jira');&eol;                response = null;&eol;            }&eol;        }&eol;&eol;        if (request.Status() < 200 &pipe;&pipe; request.Status() >= 300) {&eol;            var message = 'Request failed with status code ' + request.Status();&eol;&eol;            if (response !== null && typeof response.errors !== 'undefined'&eol;                && Object.keys(response.errors).length > 0) {&eol;                message += ': ' + JSON.stringify(response.errors);&eol;            }&eol;            else if (response !== null && typeof response.errorMessage !== 'undefined'&eol;                && Object.keys(response.errorMessage).length > 0) {&eol;                message += ': ' + JSON.stringify(response.errorMessage);&eol;            }&eol;&eol;            throw message + ' Check debug log for more information.';&eol;        }&eol;&eol;        return {&eol;            status: request.Status(),&eol;            response: response&eol;        };&eol;    },&eol;&eol;    getSchema: function() {&eol;        var result = Jira.request('get', 'servicedesk/' + Jira.params.servicedesk_id + '/requesttype/' +&eol;            Jira.params.request_type_id + '/field');&eol;&eol;        if (typeof Jira.schema !== 'object' && typeof Jira.schema.requestTypeFields !== 'object') {&eol;            Jira.schema = null;&eol;        }&eol;        else {&eol;            Jira.schema = result.response;&eol;        }&eol;    },&eol;&eol;    createRequest: function(summary, description, fields) {&eol;        var data = {&eol;            serviceDeskId: Jira.params.servicedesk_id,&eol;            requestTypeId: Jira.params.request_type_id,&eol;            requestFieldValues: {&eol;                summary: summary,&eol;                description: description&eol;            }&eol;        };&eol;&eol;        if (Jira.labels && Jira.labels.length > 0) {&eol;            data.requestFieldValues.labels = Jira.labels;&eol;        }&eol;        var result = Jira.request('post', 'request', Jira.addCustomFields(data, fields));&eol;&eol;        if (typeof result.response !== 'object' &pipe;&pipe; typeof result.response.issueKey === 'undefined') {&eol;            throw 'Cannot create Jira request. Check debug log for more information.';&eol;        }&eol;&eol;        return result.response.issueKey;&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        fields = {},&eol;        jira = {},&eol;        comment = {public: true},&eol;        result = {tags: {}},&eol;        required_params = [&eol;            'alert_subject', 'alert_message', 'event_source', 'event_value',&eol;            'event_update_status', 'event_recovery_value'&eol;        ];&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('jira_')) {&eol;                jira[key.substring(5)] = params[key];&eol;            }&eol;            else if (key.startsWith('customfield_')) {&eol;                fields[key] = params[key];&eol;            }&eol;            else if (required_params.indexOf(key) !== -1 && params[key] === '') {&eol;                throw 'Parameter "' + key + '" cannot be empty.';&eol;            }&eol;        });&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_update_status !== '0' && params.event_update_status !== '1' && params.event_source === '0') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_source !== '0' && params.event_recovery_value === '0') {&eol;        throw 'Recovery operations are supported only for trigger-based actions.';&eol;    }&eol;&eol;    Jira.setParams(jira);&eol;    Jira.setProxy(params.HTTPProxy);&eol;    Jira.getSchema();&eol;    Jira.setTags(params.event_tags_json);&eol;&eol;    // Create request for non trigger-based events.&eol;    if (params.event_source !== '0' && params.event_recovery_value !== '0') {&eol;        Jira.createRequest(params.alert_subject, params.alert_message);&eol;    }&eol;    // Create request for trigger-based events.&eol;    else if (params.event_value === '1' && params.event_update_status === '0'&eol;        && jira.request_key === '{EVENT.TAGS.__zbx_jira_requestkey}') {&eol;        var key = Jira.createRequest(params.alert_subject, params.alert_message, fields);&eol;&eol;        result.tags.__zbx_jira_requestkey = key;&eol;        result.tags.__zbx_jira_requestlink = params.jira_url +&eol;            (params.jira_url.endsWith('/') ? '' : '/') + 'browse/' + key;&eol;    }&eol;    // Comment created request for trigger-based event.&eol;    else {&eol;        if (jira.request_key === '{EVENT.TAGS.__zbx_jira_requestkey}' &pipe;&pipe; jira.request_key.trim() === '') {&eol;            throw 'Incorrect Request key given: ' + jira.request_key;&eol;        }&eol;        comment.body = params.alert_message;&eol;        Jira.request('post', 'request/' + Jira.params.request_key + '/comment', comment);&eol;    }&eol;&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.Log(3, '[ Jira Service Desk Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_jira_requestlink}   |Jira ServiceDesk: {EVENT.TAGS.__zbx_jira_requestkey}      ||
ROW   |21         |4   |OTRS                  |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |var OTRS = {&eol;    params: {},&eol;    entrypoint: 'nph-genericinterface.pl/Webservice/ZabbixTicketConnector/Ticket',&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        OTRS.params = params;&eol;        if (typeof OTRS.params.url === 'string') {&eol;            if (!OTRS.params.url.endsWith('/')) {&eol;                OTRS.params.url += '/';&eol;            }&eol;        }&eol;    },&eol;&eol;    addDynamicFields: function (data, fields) {&eol;        if (typeof fields === 'object' && Object.keys(fields).length) {&eol;            data.DynamicField = [];&eol;&eol;            Object.keys(fields)&eol;                .forEach(function(field) {&eol;                    if (field !== undefined) {&eol;                        if (fields[field].match(/^\d{4}[.-]\d{2}[.-]\d{2}$/)) {&eol;                            fields[field] = fields[field].replace(/\./g, '-');&eol;                        }&eol;&eol;                        data.DynamicField.push({Name: field, Value: fields[field]});&eol;                    }&eol;                });&eol;        }&eol;&eol;        return data;&eol;    },&eol;&eol;    request: function (method, query, data) {&eol;        ['url', 'auth_user', 'auth_password', 'queue',&eol;            'customer', 'ticket_state', 'default_priority_id', 'time_unit'].forEach(function (field) {&eol;            if (typeof OTRS.params !== 'object' &pipe;&pipe; typeof OTRS.params[field] === 'undefined'&eol;                &pipe;&pipe; OTRS.params[field] === '' ) {&eol;                throw 'Required param is not set: "' + field + '".';&eol;            }&eol;        });&eol;&eol;        var response,&eol;            request = new CurlHttpRequest(),&eol;            url = OTRS.params.url + query +&eol;                '?UserLogin=' + encodeURIComponent(OTRS.params.auth_user) +&eol;                '&Password=' + encodeURIComponent(OTRS.params.auth_password);&eol;&eol;        if (typeof OTRS.HTTPProxy !== 'undefined' && OTRS.HTTPProxy.trim() !== '') {&eol;            request.SetProxy(OTRS.HTTPProxy);&eol;        }&eol;&eol;        request.AddHeader('Content-Type: application/json');&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.Log(4, '[ OTRS Webhook ] Sending request: ' +&eol;            url + ((typeof data === 'string') ? (' ' + data) : ''));&eol;&eol;        switch (method) {&eol;            case 'get':&eol;                response = request.Get(url, data);&eol;                break;&eol;&eol;            case 'post':&eol;                response = request.Post(url, data);&eol;                break;&eol;&eol;            case 'put':&eol;                response = request.Put(url, data);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.Log(4, '[ OTRS Webhook ] Received response with status code ' + request.Status() + ': ' + response);&eol;&eol;        if (request.Status() < 200 &pipe;&pipe; request.Status() >= 300) {&eol;            var message = 'Request failed with status code ' + request.Status();&eol;&eol;            message += ': ' + response;&eol;            throw message + ' Check debug log for more information.';&eol;        }&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.Log(4, '[ OTRS Webhook ] Failed to parse response received from OTRS');&eol;                response = null;&eol;            }&eol;        }&eol;&eol;        if (typeof response.Error !== 'undefined'&eol;            && Object.keys(response.Error).length > 0) {&eol;            message = 'Request failed: ' + JSON.stringify(response.Error);&eol;        }&eol;&eol;&eol;        return {&eol;            status: request.Status(),&eol;            response: response&eol;        };&eol;    },&eol;&eol;    createTicket: function(subject, message, priority, fields) {&eol;        var result,&eol;            data = {&eol;                Ticket: {&eol;                    Title: subject,&eol;                    Queue: OTRS.params.queue,&eol;                    State: OTRS.params.ticket_state,&eol;                    PriorityID: priority &pipe;&pipe; OTRS.params.default_priority_id,&eol;                    CustomerUser: OTRS.params.customer&eol;                },&eol;                Article: {&eol;                    Subject: subject,&eol;                    Body: message,&eol;                    TimeUnit: OTRS.params.time_unit,&eol;                    ContentType: 'text/plain; charset=utf8'&eol;                }&eol;            };&eol;&eol;        result = OTRS.request('post', OTRS.entrypoint, OTRS.addDynamicFields(data, fields));&eol;&eol;        if (typeof result.response !== 'object'&eol;            &pipe;&pipe; typeof result.response.TicketID === 'undefined'&eol;            &pipe;&pipe; result.status != 200) {&eol;            throw 'Cannot create OTRS ticket. Check debug log for more information.';&eol;        }&eol;&eol;        return result.response.TicketID;&eol;    },&eol;&eol;    updateTicket: function(subject, message) {&eol;        var result,&eol;            data = {&eol;                Article: {&eol;                    Subject: subject,&eol;                    Body: message &pipe;&pipe; '',&eol;                    TimeUnit: OTRS.params.time_unit,&eol;                    ContentType: 'text/plain; charset=utf8'&eol;                }&eol;            };&eol;&eol;        result = OTRS.request('put', OTRS.entrypoint + '/' + encodeURIComponent(OTRS.params.ticket_id), data);&eol;&eol;        if (typeof result.response !== 'object'&eol;            &pipe;&pipe; typeof result.response.TicketID === 'undefined'&eol;            &pipe;&pipe; result.status != 200) {&eol;            throw 'Cannot update OTRS ticket. Check debug log for more information.';&eol;        }&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        params_otrs = {},&eol;        params_fields = {},&eol;        params_update = {},&eol;        result = {tags: {}},&eol;        required_params = [&eol;            'alert_subject', 'event_source',&eol;            'event_value',  'event_update_status'&eol;        ],&eol;        severities = [&eol;            {name: 'not_classified', color: '#97AAB3'},&eol;            {name: 'information', color: '#7499FF'},&eol;            {name: 'warning', color: '#FFC859'},&eol;            {name: 'average', color: '#FFA059'},&eol;            {name: 'high', color: '#E97659'},&eol;            {name: 'disaster', color: '#E45959'},&eol;            {name: 'resolved', color: '#009900'},&eol;            {name: null, color: '#000000'}&eol;        ],&eol;        priority;&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('otrs_')) {&eol;                params_otrs[key.substring(5)] = params[key];&eol;            }&eol;            else if (key.startsWith('dynamicfield_')) {&eol;                params_fields[key.substring(13)] = params[key];&eol;            }&eol;            else if (key.startsWith('event_update_')) {&eol;                params_update[key.substring(13)] = params[key];&eol;            }&eol;            else if (required_params.indexOf(key) !== -1 && params[key].trim() === '') {&eol;                throw 'Parameter "' + key + '" cannot be empty.';&eol;            }&eol;        });&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_source === '0' && params.event_update_status !== '0' && params.event_update_status !== '1') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_source !== '0' && params.event_value === '0') {&eol;        throw 'Recovery operations are supported only for trigger-based actions.';&eol;    }&eol;&eol;    if (params.event_source === '0'&eol;        && ((params.event_value === '1' && params.event_update_status === '1')&eol;            &pipe;&pipe; (params.event_value === '0'&eol;                && (params.event_update_status === '0' &pipe;&pipe; params.event_update_status === '1')))&eol;        && (isNaN(parseInt(params.otrs_ticket_id)) &pipe;&pipe; parseInt(params.otrs_ticket_id) < 1 )) {&eol;        throw 'Incorrect "otrs_ticket_id" parameter given: ' + params.otrs_ticket_id +&eol;            '\nMust be positive integer.';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        params.event_nseverity = '7';&eol;    }&eol;&eol;    if (params.event_value === '0') {&eol;        params.event_nseverity = '6';&eol;    }&eol;&eol;    priority = params['severity_' + severities[params.event_nseverity].name];&eol;    priority = priority && priority.trim() &pipe;&pipe; severities[7].name;&eol;&eol;    OTRS.setParams(params_otrs);&eol;    OTRS.HTTPProxy = params.HTTPProxy;&eol;&eol;    // Create ticket for non trigger-based events.&eol;    if (params.event_source !== '0'&eol;        && params.event_value !== '0') {&eol;        OTRS.createTicket(params.alert_subject, params.alert_message, priority);&eol;    }&eol;    // Create ticket for trigger-based events.&eol;    else if (params.event_value === '1' && params_update.status === '0') {&eol;        var ticket_id = OTRS.createTicket(params.alert_subject,&eol;            params.alert_subject + '\n' + params.alert_message + '\n' +&eol;            params.zabbix_url + (params.zabbix_url.endsWith('/') ? '' : '/') +&eol;            'tr_events.php?triggerid=' + params.trigger_id + '&eventid=' + params.event_id + '\n',&eol;            priority,&eol;            params_fields);&eol;&eol;        result.tags.__zbx_otrs_ticket_id = ticket_id;&eol;        result.tags.__zbx_otrs_ticketlink = params.otrs_url +&eol;            (params.otrs_url.endsWith('/') ? '' : '/') + 'index.pl?Action=AgentTicketZoom;TicketID=' + ticket_id;&eol;    }&eol;    // Update created ticket for trigger-based event.&eol;    else {&eol;        OTRS.updateTicket(params.alert_subject, params.alert_message);&eol;    }&eol;&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.Log(3, '[ OTRS Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_otrs_ticketlink}    |OTRS: ticket #{EVENT.TAGS.__zbx_otrs_ticket_id}           ||

TABLE |media_type_param
FIELDS|mediatype_paramid|mediatypeid|name                                            |value                                                                |
ROW   |1                |5          |zabbix_url                                      |{$ZABBIX.URL}                                                        |
ROW   |2                |5          |bot_token                                       |<YOUR BOT TOKEN>                                                     |
ROW   |3                |5          |mattermost_url                                  |<YOUR MATTERMOST URL>                                                |
ROW   |4                |5          |send_mode                                       |alarm                                                                |
ROW   |5                |5          |send_to                                         |{ALERT.SENDTO}                                                       |
ROW   |6                |5          |event_tags                                      |{EVENT.TAGS}                                                         |
ROW   |7                |5          |event_name                                      |{EVENT.NAME}                                                         |
ROW   |8                |5          |event_nseverity                                 |{EVENT.NSEVERITY}                                                    |
ROW   |10               |5          |event_value                                     |{EVENT.VALUE}                                                        |
ROW   |11               |5          |event_update_status                             |{EVENT.UPDATE.STATUS}                                                |
ROW   |12               |5          |event_date                                      |{EVENT.DATE}                                                         |
ROW   |13               |5          |event_time                                      |{EVENT.TIME}                                                         |
ROW   |14               |5          |event_severity                                  |{EVENT.SEVERITY}                                                     |
ROW   |15               |5          |event_opdata                                    |{EVENT.OPDATA}                                                       |
ROW   |16               |5          |event_id                                        |{EVENT.ID}                                                           |
ROW   |17               |5          |event_update_message                            |{EVENT.UPDATE.MESSAGE}                                               |
ROW   |18               |5          |trigger_id                                      |{TRIGGER.ID}                                                         |
ROW   |19               |5          |trigger_description                             |{TRIGGER.DESCRIPTION}                                                |
ROW   |20               |5          |host_name                                       |{HOST.NAME}                                                          |
ROW   |21               |5          |host_ip                                         |{HOST.IP}                                                            |
ROW   |22               |5          |event_update_date                               |{EVENT.UPDATE.DATE}                                                  |
ROW   |23               |5          |event_update_time                               |{EVENT.UPDATE.TIME}                                                  |
ROW   |24               |5          |event_recovery_date                             |{EVENT.RECOVERY.DATE}                                                |
ROW   |25               |5          |event_recovery_time                             |{EVENT.RECOVERY.TIME}                                                |
ROW   |26               |6          |url                                             |<put your opsgenie api url>                                          |
ROW   |27               |6          |web                                             |<put your opsgenie web url>                                          |
ROW   |28               |6          |token                                           |<put your key>                                                       |
ROW   |29               |6          |subject                                         |{ALERT.SUBJECT}                                                      |
ROW   |30               |6          |message                                         |{ALERT.MESSAGE}                                                      |
ROW   |31               |6          |eventid                                         |{EVENT.ID}                                                           |
ROW   |32               |6          |severity                                        |{EVENT.NSEVERITY}                                                    |
ROW   |33               |6          |user                                            |{USER.FULLNAME}                                                      |
ROW   |34               |6          |eventvalue                                      |{EVENT.VALUE}                                                        |
ROW   |35               |6          |eventupdate                                     |{EVENT.UPDATE.STATUS}                                                |
ROW   |36               |6          |eventaction                                     |{EVENT.UPDATE.ACTION}                                                |
ROW   |37               |6          |zbxurl                                          |{$ZABBIX.URL}                                                        |
ROW   |38               |6          |triggerid                                       |{TRIGGER.ID}                                                         |
ROW   |39               |7          |token                                           |<put your key>                                                       |
ROW   |40               |7          |eventid                                         |{EVENT.ID}                                                           |
ROW   |41               |7          |eventname                                       |{EVENT.NAME}                                                         |
ROW   |42               |7          |hostname                                        |{HOST.NAME}                                                          |
ROW   |43               |7          |hostip                                          |{HOST.IP}                                                            |
ROW   |44               |7          |severity                                        |{EVENT.NSEVERITY}                                                    |
ROW   |45               |7          |triggerdesc                                     |{TRIGGER.DESCRIPTION}                                                |
ROW   |46               |7          |triggeropdata                                   |{EVENT.OPDATA}                                                       |
ROW   |47               |7          |eventtags                                       |{EVENT.TAGS}                                                         |
ROW   |48               |7          |triggerid                                       |{TRIGGER.ID}                                                         |
ROW   |49               |7          |eventdate                                       |{EVENT.DATE}                                                         |
ROW   |50               |7          |eventtime                                       |{EVENT.TIME}                                                         |
ROW   |52               |7          |eventack                                        |{EVENT.ACK.STATUS}                                                   |
ROW   |53               |7          |eventupdate                                     |{EVENT.UPDATE.STATUS}                                                |
ROW   |54               |7          |eventvalue                                      |{EVENT.VALUE}                                                        |
ROW   |55               |7          |url                                             |{$ZABBIX.URL}                                                        |
ROW   |56               |8          |token                                           |<PUSHOVER TOKEN HERE>                                                |
ROW   |57               |8          |user                                            |{ALERT.SENDTO}                                                       |
ROW   |58               |8          |message                                         |{ALERT.MESSAGE}                                                      |
ROW   |59               |8          |title                                           |{ALERT.SUBJECT}                                                      |
ROW   |60               |8          |url                                             |{$ZABBIX.URL}                                                        |
ROW   |61               |8          |url_title                                       |Zabbix                                                               |
ROW   |62               |8          |priority                                        |0                                                                    |
ROW   |63               |8          |eventid                                         |{EVENT.ID}                                                           |
ROW   |64               |8          |triggerid                                       |{TRIGGER.ID}                                                         |
ROW   |65               |9          |zabbix_url                                      |{$ZABBIX.URL}                                                        |
ROW   |66               |9          |bot_token                                       |<PLACE YOUR KEY HERE>                                                |
ROW   |67               |9          |channel                                         |{ALERT.SENDTO}                                                       |
ROW   |68               |9          |slack_mode                                      |alarm                                                                |
ROW   |69               |9          |slack_as_user                                   |true                                                                 |
ROW   |71               |9          |event_tags                                      |{EVENT.TAGS}                                                         |
ROW   |72               |9          |event_name                                      |{EVENT.NAME}                                                         |
ROW   |73               |9          |event_nseverity                                 |{EVENT.NSEVERITY}                                                    |
ROW   |75               |9          |event_value                                     |{EVENT.VALUE}                                                        |
ROW   |76               |9          |event_update_status                             |{EVENT.UPDATE.STATUS}                                                |
ROW   |77               |9          |event_date                                      |{EVENT.DATE}                                                         |
ROW   |78               |9          |event_time                                      |{EVENT.TIME}                                                         |
ROW   |79               |9          |event_severity                                  |{EVENT.SEVERITY}                                                     |
ROW   |80               |9          |event_opdata                                    |{EVENT.OPDATA}                                                       |
ROW   |81               |9          |event_id                                        |{EVENT.ID}                                                           |
ROW   |82               |9          |event_update_message                            |{EVENT.UPDATE.MESSAGE}                                               |
ROW   |83               |9          |trigger_id                                      |{TRIGGER.ID}                                                         |
ROW   |84               |9          |trigger_description                             |{TRIGGER.DESCRIPTION}                                                |
ROW   |85               |9          |host_name                                       |{HOST.NAME}                                                          |
ROW   |86               |9          |host_ip                                         |{HOST.IP}                                                            |
ROW   |87               |9          |event_update_date                               |{EVENT.UPDATE.DATE}                                                  |
ROW   |88               |9          |event_update_time                               |{EVENT.UPDATE.TIME}                                                  |
ROW   |89               |9          |event_recovery_date                             |{EVENT.RECOVERY.DATE}                                                |
ROW   |90               |9          |event_recovery_time                             |{EVENT.RECOVERY.TIME}                                                |
ROW   |91               |10         |zabbix_url                                      |{$ZABBIX.URL}                                                        |
ROW   |92               |10         |discord_endpoint                                |{ALERT.SENDTO}                                                       |
ROW   |93               |10         |use_default_message                             |false                                                                |
ROW   |94               |10         |alert_message                                   |{ALERT.MESSAGE}                                                      |
ROW   |95               |10         |alert_subject                                   |{ALERT.SUBJECT}                                                      |
ROW   |96               |10         |event_name                                      |{EVENT.NAME}                                                         |
ROW   |97               |10         |event_id                                        |{EVENT.ID}                                                           |
ROW   |98               |10         |event_severity                                  |{EVENT.SEVERITY}                                                     |
ROW   |99               |10         |event_nseverity                                 |{EVENT.NSEVERITY}                                                    |
ROW   |100              |10         |event_opdata                                    |{EVENT.OPDATA}                                                       |
ROW   |101              |10         |event_tags                                      |{EVENT.TAGS}                                                         |
ROW   |102              |10         |event_time                                      |{EVENT.TIME}                                                         |
ROW   |103              |10         |event_date                                      |{EVENT.DATE}                                                         |
ROW   |104              |10         |event_recovery_date                             |{EVENT.RECOVERY.DATE}                                                |
ROW   |105              |10         |event_recovery_time                             |{EVENT.RECOVERY.TIME}                                                |
ROW   |106              |10         |event_update_date                               |{EVENT.UPDATE.DATE}                                                  |
ROW   |107              |10         |event_update_time                               |{EVENT.UPDATE.TIME}                                                  |
ROW   |108              |10         |event_update_action                             |{EVENT.UPDATE.ACTION}                                                |
ROW   |109              |10         |event_update_message                            |{EVENT.UPDATE.MESSAGE}                                               |
ROW   |110              |10         |event_update_status                             |{EVENT.UPDATE.STATUS}                                                |
ROW   |111              |10         |event_update_user                               |{USER.FULLNAME}                                                      |
ROW   |112              |10         |event_value                                     |{EVENT.VALUE}                                                        |
ROW   |113              |10         |host_ip                                         |{HOST.IP}                                                            |
ROW   |114              |10         |host_name                                       |{HOST.NAME}                                                          |
ROW   |115              |10         |trigger_description                             |{TRIGGER.DESCRIPTION}                                                |
ROW   |116              |10         |trigger_id                                      |{TRIGGER.ID}                                                         |
ROW   |117              |8          |endpoint                                        |https://api.pushover.net/1/messages.json                             |
ROW   |118              |8          |retry                                           |60                                                                   |
ROW   |119              |8          |expire                                          |1200                                                                 |
ROW   |120              |11         |teamsecret                                      |Your SIGNL4 Team Secret                                              |
ROW   |121              |11         |Subject                                         |{ALERT.SUBJECT}                                                      |
ROW   |122              |11         |Message                                         |{ALERT.MESSAGE}                                                      |
ROW   |123              |11         |Severity                                        |{EVENT.SEVERITY}                                                     |
ROW   |125              |11         |Hostname                                        |{HOST.NAME}                                                          |
ROW   |127              |12         |alert_message                                   |{ALERT.MESSAGE}                                                      |
ROW   |128              |12         |alert_subject                                   |{ALERT.SUBJECT}                                                      |
ROW   |129              |12         |event_recovery_value                            |{EVENT.RECOVERY.VALUE}                                               |
ROW   |130              |12         |event_source                                    |{EVENT.SOURCE}                                                       |
ROW   |131              |12         |event_tags_json                                 |{EVENT.TAGSJSON}                                                     |
ROW   |132              |12         |event_update_action                             |{EVENT.UPDATE.ACTION}                                                |
ROW   |133              |12         |event_update_message                            |{EVENT.UPDATE.MESSAGE}                                               |
ROW   |134              |12         |event_update_status                             |{EVENT.UPDATE.STATUS}                                                |
ROW   |135              |12         |event_update_user                               |{USER.FULLNAME}                                                      |
ROW   |136              |12         |event_value                                     |{EVENT.VALUE}                                                        |
ROW   |137              |12         |jira_issue_key                                  |{EVENT.TAGS.__zbx_jira_issuekey}                                     |
ROW   |138              |12         |jira_issue_type                                 |<PLACE ISSUETYPE NAME>                                               |
ROW   |139              |12         |jira_password                                   |<PLACE PASSWORD OR TOKEN>                                            |
ROW   |140              |12         |jira_project_key                                |<PLACE PROJECT KEY>                                                  |
ROW   |141              |12         |jira_url                                        |<PLACE YOUR JIRA URL>                                                |
ROW   |142              |12         |jira_user                                       |<PLACE LOGIN>                                                        |
ROW   |143              |12         |trigger_description                             |{TRIGGER.DESCRIPTION}                                                |
ROW   |144              |13         |<'DATETIME' CUSTOMFIELD FOR EVENT RECOVERY TIME>|{EVENT.RECOVERY.DATE}T{EVENT.RECOVERY.TIME}                          |
ROW   |145              |13         |<'DATETIME' CUSTOMFIELD FOR EVENT TIME>         |{EVENT.DATE}T{EVENT.TIME}                                            |
ROW   |146              |13         |<'NUMBER' CUSTOMFIELD FOR EVENT.ID>             |{EVENT.ID}                                                           |
ROW   |147              |13         |<'NUMBER' CUSTOMFIELD FOR TRIGGER.ID>           |{TRIGGER.ID}                                                         |
ROW   |148              |13         |<'STRING' CUSTOMFIELD FOR HOST\IP>              |{HOST.HOST} [{HOST.IP}]                                              |
ROW   |149              |13         |<'STRING' CUSTOMFIELD FOR OPERATIONAL DATA>     |{EVENT.OPDATA}                                                       |
ROW   |150              |13         |<'STRING' CUSTOMFIELD FOR SEVERITY>             |{EVENT.SEVERITY}                                                     |
ROW   |151              |13         |<'URL' CUSTOMFIELD FOR EVENT URL>               |{$ZABBIX.URL}/tr_events.php?triggerid={TRIGGER.ID}&eventid={EVENT.ID}|
ROW   |152              |13         |alert_message                                   |{ALERT.MESSAGE}                                                      |
ROW   |153              |13         |alert_subject                                   |{ALERT.SUBJECT}                                                      |
ROW   |154              |13         |event_recovery_value                            |{EVENT.RECOVERY.VALUE}                                               |
ROW   |155              |13         |event_source                                    |{EVENT.SOURCE}                                                       |
ROW   |156              |13         |event_tags_json                                 |{EVENT.TAGSJSON}                                                     |
ROW   |157              |13         |event_update_action                             |{EVENT.UPDATE.ACTION}                                                |
ROW   |158              |13         |event_update_message                            |{EVENT.UPDATE.MESSAGE}                                               |
ROW   |159              |13         |event_update_status                             |{EVENT.UPDATE.STATUS}                                                |
ROW   |160              |13         |event_update_user                               |{USER.FULLNAME}                                                      |
ROW   |161              |13         |event_value                                     |{EVENT.VALUE}                                                        |
ROW   |162              |13         |jira_issue_key                                  |{EVENT.TAGS.__zbx_jira_issuekey}                                     |
ROW   |163              |13         |jira_issue_type                                 |<PLACE ISSUETYPE NAME>                                               |
ROW   |164              |13         |jira_password                                   |<PLACE PASSWORD OR TOKEN>                                            |
ROW   |165              |13         |jira_project_key                                |<PLACE PROJECT KEY>                                                  |
ROW   |166              |13         |jira_url                                        |<PLACE YOUR JIRA URL>                                                |
ROW   |167              |13         |jira_user                                       |<PLACE LOGIN>                                                        |
ROW   |168              |13         |trigger_description                             |{TRIGGER.DESCRIPTION}                                                |
ROW   |169              |14         |alert_message                                   |{ALERT.MESSAGE}                                                      |
ROW   |170              |14         |alert_subject                                   |{ALERT.SUBJECT}                                                      |
ROW   |171              |14         |event_date                                      |{EVENT.DATE}                                                         |
ROW   |172              |14         |event_id                                        |{EVENT.ID}                                                           |
ROW   |173              |14         |event_nseverity                                 |{EVENT.NSEVERITY}                                                    |
ROW   |174              |14         |event_opdata                                    |{EVENT.OPDATA}                                                       |
ROW   |175              |14         |event_recovery_date                             |{EVENT.RECOVERY.DATE}                                                |
ROW   |176              |14         |event_recovery_time                             |{EVENT.RECOVERY.TIME}                                                |
ROW   |177              |14         |event_severity                                  |{EVENT.SEVERITY}                                                     |
ROW   |178              |14         |event_source                                    |{EVENT.SOURCE}                                                       |
ROW   |179              |14         |event_status                                    |{EVENT.STATUS}                                                       |
ROW   |180              |14         |event_tags                                      |{EVENT.TAGS}                                                         |
ROW   |181              |14         |event_time                                      |{EVENT.TIME}                                                         |
ROW   |182              |14         |event_update_action                             |{EVENT.UPDATE.ACTION}                                                |
ROW   |183              |14         |event_update_date                               |{EVENT.UPDATE.DATE}                                                  |
ROW   |184              |14         |event_update_message                            |{EVENT.UPDATE.MESSAGE}                                               |
ROW   |185              |14         |event_update_status                             |{EVENT.UPDATE.STATUS}                                                |
ROW   |186              |14         |event_update_time                               |{EVENT.UPDATE.TIME}                                                  |
ROW   |187              |14         |event_update_user                               |{USER.FULLNAME}                                                      |
ROW   |188              |14         |event_value                                     |{EVENT.VALUE}                                                        |
ROW   |189              |14         |host_ip                                         |{HOST.IP}                                                            |
ROW   |190              |14         |host_name                                       |{HOST.NAME}                                                          |
ROW   |191              |14         |teams_endpoint                                  |<PLACE WEBHOOK URL HERE>                                             |
ROW   |192              |14         |trigger_description                             |{TRIGGER.DESCRIPTION}                                                |
ROW   |193              |14         |trigger_id                                      |{TRIGGER.ID}                                                         |
ROW   |194              |14         |use_default_message                             |false                                                                |
ROW   |195              |14         |zabbix_url                                      |{$ZABBIX.URL}                                                        |
ROW   |196              |15         |alert_message                                   |{ALERT.MESSAGE}                                                      |
ROW   |197              |15         |alert_subject                                   |{ALERT.SUBJECT}                                                      |
ROW   |198              |15         |event_id                                        |{EVENT.ID}                                                           |
ROW   |199              |15         |event_nseverity                                 |{EVENT.NSEVERITY}                                                    |
ROW   |200              |15         |event_source                                    |{EVENT.SOURCE}                                                       |
ROW   |201              |15         |event_update_message                            |{EVENT.UPDATE.MESSAGE}                                               |
ROW   |202              |15         |event_update_status                             |{EVENT.UPDATE.STATUS}                                                |
ROW   |203              |15         |event_value                                     |{EVENT.VALUE}                                                        |
ROW   |204              |15         |redmine_access_key                              |<PUT YOUR ACCESS KEY>                                                |
ROW   |205              |15         |redmine_issue_key                               |{EVENT.TAGS.__zbx_redmine_issue_id}                                  |
ROW   |206              |15         |redmine_project                                 |<PUT YOUR PROJECT ID OR NAME>                                        |
ROW   |207              |15         |redmine_tracker_id                              |<PUT YOUR TRACKER ID>                                                |
ROW   |208              |15         |redmine_url                                     |<PUT YOUR REDMINE URL>                                               |
ROW   |209              |15         |trigger_id                                      |{TRIGGER.ID}                                                         |
ROW   |210              |15         |zabbix_url                                      |{$ZABBIX.URL}                                                        |
ROW   |211              |16         |Message                                         |{ALERT.MESSAGE}                                                      |
ROW   |212              |16         |ParseMode                                       |                                                                     |
ROW   |213              |16         |Subject                                         |{ALERT.SUBJECT}                                                      |
ROW   |214              |16         |To                                              |{ALERT.SENDTO}                                                       |
ROW   |215              |16         |Token                                           |<PLACE YOUR TOKEN>                                                   |
ROW   |216              |17         |alert_message                                   |{ALERT.MESSAGE}                                                      |
ROW   |217              |17         |alert_subject                                   |{ALERT.SUBJECT}                                                      |
ROW   |218              |17         |event_id                                        |{EVENT.ID}                                                           |
ROW   |219              |17         |event_nseverity                                 |{EVENT.NSEVERITY}                                                    |
ROW   |220              |17         |event_source                                    |{EVENT.SOURCE}                                                       |
ROW   |221              |17         |event_tags                                      |{EVENT.TAGS}                                                         |
ROW   |222              |17         |event_update_status                             |{EVENT.UPDATE.STATUS}                                                |
ROW   |223              |17         |event_value                                     |{EVENT.VALUE}                                                        |
ROW   |224              |17         |severity_average                                |normal                                                               |
ROW   |225              |17         |severity_default                                |-                                                                    |
ROW   |226              |17         |severity_disaster                               |urgent                                                               |
ROW   |227              |17         |severity_high                                   |high                                                                 |
ROW   |228              |17         |severity_information                            |low                                                                  |
ROW   |229              |17         |severity_not_classified                         |low                                                                  |
ROW   |230              |17         |severity_warning                                |normal                                                               |
ROW   |231              |17         |trigger_id                                      |{TRIGGER.ID}                                                         |
ROW   |232              |17         |zbxurl                                          |{$ZABBIX.URL}                                                        |
ROW   |233              |17         |zendesk_issue_key                               |{EVENT.TAGS.__zbx_zdk_issuekey}                                      |
ROW   |234              |17         |zendesk_token                                   |<put your {enduser_email_address}/token:{api_token}>                 |
ROW   |235              |17         |zendesk_type                                    |incident                                                             |
ROW   |236              |17         |zendesk_url                                     |<put your Zendesk URL>                                               |
ROW   |237              |18         |alert_message                                   |{ALERT.MESSAGE}                                                      |
ROW   |238              |18         |alert_subject                                   |{ALERT.SUBJECT}                                                      |
ROW   |239              |18         |event_nseverity                                 |{EVENT.NSEVERITY}                                                    |
ROW   |240              |18         |event_recovery_value                            |{EVENT.RECOVERY.VALUE}                                               |
ROW   |241              |18         |event_source                                    |{EVENT.SOURCE}                                                       |
ROW   |242              |18         |event_update_status                             |{EVENT.UPDATE.STATUS}                                                |
ROW   |243              |18         |event_value                                     |{EVENT.VALUE}                                                        |
ROW   |244              |18         |servicenow_password                             |<PLACE PASSWORD HERE>                                                |
ROW   |245              |18         |servicenow_sys_id                               |{EVENT.TAGS.__zbx_servicenow_sys_id}                                 |
ROW   |246              |18         |servicenow_url                                  |{ALERT.SENDTO}                                                       |
ROW   |247              |18         |servicenow_user                                 |<PLACE USERNAME HERE>                                                |
ROW   |248              |18         |urgency_for_average                             |2                                                                    |
ROW   |249              |18         |urgency_for_disaster                            |1                                                                    |
ROW   |250              |18         |urgency_for_high                                |2                                                                    |
ROW   |251              |18         |urgency_for_information                         |3                                                                    |
ROW   |252              |18         |urgency_for_not_classified                      |3                                                                    |
ROW   |253              |18         |urgency_for_warning                             |3                                                                    |
ROW   |254              |19         |alert_message                                   |{ALERT.MESSAGE}                                                      |
ROW   |255              |19         |alert_subject                                   |{ALERT.SUBJECT}                                                      |
ROW   |256              |19         |event_id                                        |{EVENT.ID}                                                           |
ROW   |257              |19         |event_nseverity                                 |{EVENT.NSEVERITY}                                                    |
ROW   |258              |19         |event_source                                    |{EVENT.SOURCE}                                                       |
ROW   |259              |19         |event_tags                                      |{EVENT.TAGSJSON}                                                     |
ROW   |260              |19         |event_update_message                            |{EVENT.UPDATE.MESSAGE}                                               |
ROW   |261              |19         |event_update_status                             |{EVENT.UPDATE.STATUS}                                                |
ROW   |262              |19         |event_value                                     |{EVENT.VALUE}                                                        |
ROW   |263              |19         |trigger_id                                      |{TRIGGER.ID}                                                         |
ROW   |264              |19         |zabbix_url                                      |{$ZABBIX.URL}                                                        |
ROW   |265              |19         |zammad_access_token                             |<PUT YOUR ACCESS TOKEN>                                              |
ROW   |266              |19         |zammad_customer                                 |<PUT YOUR CUSTOMER EMAIL>                                            |
ROW   |267              |19         |zammad_enable_tags                              |true                                                                 |
ROW   |268              |19         |zammad_ticket_id                                |{EVENT.TAGS.__zbx_zammad_ticket_id}                                  |
ROW   |269              |19         |zammad_url                                      |<PUT YOUR ZAMMAD URL>                                                |
ROW   |270              |20         |alert_message                                   |{ALERT.MESSAGE}                                                      |
ROW   |271              |20         |alert_subject                                   |{ALERT.SUBJECT}                                                      |
ROW   |272              |20         |event_recovery_value                            |{EVENT.RECOVERY.VALUE}                                               |
ROW   |273              |20         |event_source                                    |{EVENT.SOURCE}                                                       |
ROW   |274              |20         |event_tags_json                                 |{EVENT.TAGSJSON}                                                     |
ROW   |275              |20         |event_update_status                             |{EVENT.UPDATE.STATUS}                                                |
ROW   |276              |20         |event_value                                     |{EVENT.VALUE}                                                        |
ROW   |277              |20         |jira_password                                   |<PLACE PASSWORD OR TOKEN>                                            |
ROW   |278              |20         |jira_request_key                                |{EVENT.TAGS.__zbx_jira_requestkey}                                   |
ROW   |279              |20         |jira_request_type_id                            |<PLACE REQUEST TYPE ID>                                              |
ROW   |280              |20         |jira_servicedesk_id                             |<PLACE SERVICEDESK ID>                                               |
ROW   |281              |20         |jira_url                                        |<PLACE YOUR JIRA URL>                                                |
ROW   |282              |20         |jira_user                                       |<PLACE LOGIN>                                                        |
ROW   |283              |21         |alert_message                                   |{ALERT.MESSAGE}                                                      |
ROW   |284              |21         |alert_subject                                   |{ALERT.SUBJECT}                                                      |
ROW   |285              |21         |event_id                                        |{EVENT.ID}                                                           |
ROW   |286              |21         |event_nseverity                                 |{EVENT.NSEVERITY}                                                    |
ROW   |287              |21         |event_source                                    |{EVENT.SOURCE}                                                       |
ROW   |288              |21         |event_update_message                            |{EVENT.UPDATE.MESSAGE}                                               |
ROW   |289              |21         |event_update_status                             |{EVENT.UPDATE.STATUS}                                                |
ROW   |290              |21         |event_value                                     |{EVENT.VALUE}                                                        |
ROW   |291              |21         |otrs_auth_password                              |<PUT YOUR USER PASSWORD>                                             |
ROW   |292              |21         |otrs_auth_user                                  |<PUT YOUR USER NAME>                                                 |
ROW   |293              |21         |otrs_customer                                   |<PUT YOUR CUSTOMER EMAIL>                                            |
ROW   |294              |21         |otrs_default_priority_id                        |3                                                                    |
ROW   |295              |21         |otrs_queue                                      |<PUT YOUR QUEUE NAME>                                                |
ROW   |296              |21         |otrs_ticket_id                                  |{EVENT.TAGS.__zbx_otrs_ticket_id}                                    |
ROW   |297              |21         |otrs_ticket_state                               |new                                                                  |
ROW   |298              |21         |otrs_time_unit                                  |0                                                                    |
ROW   |299              |21         |otrs_url                                        |<PUT YOUR OTRS URL>                                                  |
ROW   |300              |21         |trigger_id                                      |{TRIGGER.ID}                                                         |
ROW   |301              |21         |zabbix_url                                      |{$ZABBIX.URL}                                                        |
ROW   |302              |11         |Event_Ack_Status                                |{EVENT.ACK.STATUS}                                                   |
ROW   |303              |11         |Event_Date_Time                                 |{EVENT.DATE} {EVENT.TIME}                                            |
ROW   |304              |11         |Event_ID                                        |{EVENT.ID}                                                           |
ROW   |305              |11         |Event_Update_Action                             |{EVENT.UPDATE.ACTION}                                                |
ROW   |306              |11         |Event_Update_Status                             |{EVENT.UPDATE.STATUS}                                                |
ROW   |307              |11         |Host_IP                                         |{HOST.IP}                                                            |
ROW   |308              |11         |Trigger_ID                                      |{TRIGGER.ID}                                                         |
ROW   |309              |11         |Trigger_Status                                  |{TRIGGER.STATUS}                                                     |
ROW   |310              |11         |User                                            |{USER.FULLNAME}                                                      |
ROW   |311              |11         |Zabbix_URL                                      |Your Zabbix URL                                                      |

TABLE |media_type_message
FIELDS|mediatype_messageid|mediatypeid|eventsource|recovery|subject                                                          |message                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |1                  |1          |0          |0       |Problem: {EVENT.NAME}                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                   |
ROW   |2                  |1          |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                       |Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                     |
ROW   |3                  |1          |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                    |
ROW   |4                  |1          |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}|Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                     |
ROW   |5                  |1          |2          |0       |Autoregistration: {HOST.HOST}                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}                                                                                                                                                                                                                                                                                                                                                                                                                        |
ROW   |6                  |3          |0          |0       |                                                                 |{EVENT.SEVERITY}: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;{EVENT.DATE} {EVENT.TIME}                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |7                  |3          |0          |1       |                                                                 |Resolved in {EVENT.DURATION}: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;{EVENT.DATE} {EVENT.TIME}                                                                                                                                                                                                                                                                                                                                                                                                   |
ROW   |8                  |3          |0          |2       |                                                                 |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem in {EVENT.AGE} at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |9                  |3          |1          |0       |                                                                 |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |10                 |3          |2          |0       |                                                                 |Autoregistration: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}                                                                                                                                                                                                                                                                                                                                                                                                                 |
ROW   |11                 |4          |0          |0       |Problem: {EVENT.NAME}                                            |<b>Problem started</b> at {EVENT.TIME} on {EVENT.DATE}<br><b>Problem name:</b> {EVENT.NAME}<br><b>Host:</b> {HOST.NAME}<br><b>Severity:</b> {EVENT.SEVERITY}<br><b>Operational data:</b> {EVENT.OPDATA}<br><b>Original problem ID:</b> {EVENT.ID}<br>{TRIGGER.URL}                                                                                                                                                                                                                               |
ROW   |12                 |4          |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                       |<b>Problem has been resolved</b> at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}<br><b>Problem name:</b> {EVENT.NAME}<br><b>Problem duration:</b> {EVENT.DURATION}<br><b>Host:</b> {HOST.NAME}<br><b>Severity:</b> {EVENT.SEVERITY}<br><b>Original problem ID:</b> {EVENT.ID}<br>{TRIGGER.URL}                                                                                                                                                                                                 |
ROW   |13                 |4          |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                     |<b>{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem</b> at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.<br>{EVENT.UPDATE.MESSAGE}<br><br><b>Current problem status:</b> {EVENT.STATUS}<br><b>Age:</b> {EVENT.AGE}<br><b>Acknowledged:</b> {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                           |
ROW   |14                 |4          |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}|<b>Discovery rule:</b> {DISCOVERY.RULE.NAME}<br><br><b>Device IP:</b> {DISCOVERY.DEVICE.IPADDRESS}<br><b>Device DNS:</b> {DISCOVERY.DEVICE.DNS}<br><b>Device status:</b> {DISCOVERY.DEVICE.STATUS}<br><b>Device uptime:</b> {DISCOVERY.DEVICE.UPTIME}<br><br><b>Device service name:</b> {DISCOVERY.SERVICE.NAME}<br><b>Device service port:</b> {DISCOVERY.SERVICE.PORT}<br><b>Device service status:</b> {DISCOVERY.SERVICE.STATUS}<br><b>Device service uptime:</b> {DISCOVERY.SERVICE.UPTIME}|
ROW   |15                 |4          |2          |0       |Autoregistration: {HOST.HOST}                                    |<b>Host name:</b> {HOST.HOST}<br><b>Host IP:</b> {HOST.IP}<br><b>Agent port:</b> {HOST.PORT}                                                                                                                                                                                                                                                                                                                                                                                                     |
ROW   |16                 |11         |0          |0       |Problem: {EVENT.NAME}                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                   |
ROW   |17                 |11         |0          |1       |Resolved: {EVENT.NAME}                                           |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                        |
ROW   |18                 |11         |0          |2       |Updated problem: {EVENT.NAME}                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                        |
ROW   |19                 |11         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}|Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                     |
ROW   |20                 |11         |2          |0       |Autoregistration: {HOST.HOST}                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}                                                                                                                                                                                                                                                                                                                                                                                                                        |
ROW   |21                 |12         |0          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                   |
ROW   |22                 |12         |0          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                        |
ROW   |23                 |12         |0          |2       |[{EVENT.STATUS}] {EVENT.NAME}                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                        |
ROW   |24                 |12         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}|Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                     |
ROW   |25                 |12         |2          |0       |Autoregistration: {HOST.HOST}                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}                                                                                                                                                                                                                                                                                                                                                                                                                        |
ROW   |26                 |13         |0          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                   |
ROW   |27                 |13         |0          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                        |
ROW   |28                 |13         |0          |2       |[{EVENT.STATUS}] {EVENT.NAME}                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                        |
ROW   |29                 |13         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}|Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                     |
ROW   |30                 |13         |2          |0       |Autoregistration: {HOST.HOST}                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}                                                                                                                                                                                                                                                                                                                                                                                                                        |
ROW   |31                 |14         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}|Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                     |
ROW   |32                 |14         |2          |0       |Autoregistration: {HOST.HOST}                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}                                                                                                                                                                                                                                                                                                                                                                                                                        |
ROW   |33                 |14         |0          |0       |Problem: {EVENT.NAME}                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                   |
ROW   |34                 |14         |0          |1       |Resolved: {EVENT.NAME}                                           |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                        |
ROW   |35                 |14         |0          |2       |Updated problem: {EVENT.NAME}                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                        |
ROW   |36                 |15         |0          |0       |Problem: {EVENT.NAME}                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                   |
ROW   |37                 |15         |0          |1       |Resolved: {EVENT.NAME}                                           |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                        |
ROW   |38                 |15         |0          |2       |Updated problem: {EVENT.NAME}                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                        |
ROW   |39                 |15         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}|Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                     |
ROW   |40                 |15         |2          |0       |Autoregistration: {HOST.HOST}                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}                                                                                                                                                                                                                                                                                                                                                                                                                        |
ROW   |41                 |16         |0          |0       |Problem: {EVENT.NAME}                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                   |
ROW   |42                 |16         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                       |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                        |
ROW   |43                 |16         |0          |2       |Updated problem: {EVENT.NAME}                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                        |
ROW   |44                 |16         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}|Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                     |
ROW   |45                 |16         |2          |0       |Autoregistration: {HOST.HOST}                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}                                                                                                                                                                                                                                                                                                                                                                                                                        |
ROW   |46                 |17         |0          |0       |{EVENT.NAME}                                                     |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                   |
ROW   |47                 |17         |0          |1       |{EVENT.NAME}                                                     |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                   |
ROW   |48                 |17         |0          |2       |{EVENT.NAME}                                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                        |
ROW   |49                 |17         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}|Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                     |
ROW   |50                 |17         |2          |0       |Autoregistration: {HOST.HOST}                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}                                                                                                                                                                                                                                                                                                                                                                                                                        |
ROW   |51                 |17         |3          |0       |Internal problem: {EVENT.NAME}                                   |Internal problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                           |
ROW   |52                 |18         |0          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                   |
ROW   |53                 |18         |0          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                        |
ROW   |54                 |18         |0          |2       |[{EVENT.STATUS}] {EVENT.NAME}                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                        |
ROW   |55                 |18         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}|Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                     |
ROW   |56                 |18         |2          |0       |Autoregistration: {HOST.HOST}                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}                                                                                                                                                                                                                                                                                                                                                                                                                        |
ROW   |57                 |19         |0          |0       |Problem: {EVENT.NAME}                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                   |
ROW   |58                 |19         |0          |1       |Resolved: {EVENT.NAME}                                           |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                        |
ROW   |59                 |19         |0          |2       |Updated problem: {EVENT.NAME}                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                        |
ROW   |60                 |19         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}|Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                     |
ROW   |61                 |19         |2          |0       |Autoregistration: {HOST.HOST}                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}                                                                                                                                                                                                                                                                                                                                                                                                                        |
ROW   |62                 |20         |0          |0       |{EVENT.NAME}                                                     |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                   |
ROW   |63                 |20         |0          |1       |{EVENT.NAME}                                                     |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                        |
ROW   |64                 |20         |0          |2       |{EVENT.NAME}                                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                        |
ROW   |65                 |20         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}|Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                     |
ROW   |66                 |20         |2          |0       |Autoregistration: {HOST.HOST}                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}                                                                                                                                                                                                                                                                                                                                                                                                                        |
ROW   |67                 |21         |0          |0       |Problem: {EVENT.NAME}                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                   |
ROW   |68                 |21         |0          |1       |Resolved: {EVENT.NAME}                                           |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                        |
ROW   |69                 |21         |0          |2       |Updated problem: {EVENT.NAME}                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                        |
ROW   |70                 |21         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}|Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                     |
ROW   |71                 |21         |2          |0       |Autoregistration: {HOST.HOST}                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}                                                                                                                                                                                                                                                                                                                                                                                                                        |

TABLE |usrgrp
FIELDS|usrgrpid|name                     |gui_access|users_status|debug_mode|
ROW   |7       |Zabbix administrators    |0         |0           |0         |
ROW   |8       |Guests                   |1         |0           |0         |
ROW   |9       |Disabled                 |0         |1           |0         |
ROW   |11      |Enabled debug mode       |0         |0           |1         |
ROW   |12      |No access to the frontend|3         |0           |0         |

TABLE |users_groups
FIELDS|id  |usrgrpid|userid|
ROW   |2   |8       |2     |
ROW   |3   |9       |2     |
ROW   |4   |7       |1     |

TABLE |scripts
FIELDS|scriptid|name                   |command                                                       |host_access|usrgrpid|groupid|description|confirmation|type|execute_on|
ROW   |1       |Ping                   |ping -c 3 {HOST.CONN}; case $? in [01]) true;; *) false;; esac|2          |NULL    |NULL   |           |            |0   |2         |
ROW   |2       |Traceroute             |/usr/bin/traceroute {HOST.CONN}                               |2          |NULL    |NULL   |           |            |0   |2         |
ROW   |3       |Detect operating system|sudo /usr/bin/nmap -O {HOST.CONN}                             |2          |7       |NULL   |           |            |0   |2         |

TABLE |actions
FIELDS|actionid|name                                          |eventsource|evaltype|status|esc_period|formula|pause_suppressed|
ROW   |2       |Auto discovery. Linux servers.                |1          |0       |1     |0         |       |1               |
ROW   |3       |Report problems to Zabbix administrators      |0          |0       |1     |1h        |       |1               |
ROW   |4       |Report not supported items                    |3          |0       |1     |1h        |       |1               |
ROW   |5       |Report not supported low level discovery rules|3          |0       |1     |1h        |       |1               |
ROW   |6       |Report unknown triggers                       |3          |0       |1     |1h        |       |1               |

TABLE |operations
FIELDS|operationid|actionid|operationtype|esc_period|esc_step_from|esc_step_to|evaltype|recovery|
ROW   |1          |2       |6            |0         |1            |1          |0       |0       |
ROW   |2          |2       |4            |0         |1            |1          |0       |0       |
ROW   |3          |3       |0            |0         |1            |1          |0       |0       |
ROW   |4          |4       |0            |0         |1            |1          |0       |0       |
ROW   |5          |5       |0            |0         |1            |1          |0       |0       |
ROW   |6          |6       |0            |0         |1            |1          |0       |0       |
ROW   |7          |3       |11           |0         |1            |1          |0       |1       |
ROW   |8          |4       |11           |0         |1            |1          |0       |1       |
ROW   |9          |5       |11           |0         |1            |1          |0       |1       |
ROW   |10         |6       |11           |0         |1            |1          |0       |1       |

TABLE |opmessage
FIELDS|operationid|default_msg|subject|message|mediatypeid|
ROW   |3          |1          |       |       |NULL       |
ROW   |4          |1          |       |       |NULL       |
ROW   |5          |1          |       |       |NULL       |
ROW   |6          |1          |       |       |NULL       |
ROW   |7          |1          |       |       |NULL       |
ROW   |8          |1          |       |       |NULL       |
ROW   |9          |1          |       |       |NULL       |
ROW   |10         |1          |       |       |NULL       |

TABLE |opmessage_grp
FIELDS|opmessage_grpid|operationid|usrgrpid|
ROW   |1              |3          |7       |
ROW   |2              |4          |7       |
ROW   |3              |5          |7       |
ROW   |4              |6          |7       |

TABLE |opgroup
FIELDS|opgroupid|operationid|groupid|
ROW   |1        |2          |2      |

TABLE |conditions
FIELDS|conditionid|actionid|conditiontype|operator|value|value2|
ROW   |2          |2       |10           |0       |0    |      |
ROW   |3          |2       |8            |0       |9    |      |
ROW   |4          |2       |12           |2       |Linux|      |
ROW   |6          |4       |23           |0       |0    |      |
ROW   |7          |5       |23           |0       |2    |      |
ROW   |8          |6       |23           |0       |4    |      |

TABLE |config
FIELDS|configid|refresh_unsupported|work_period    |alert_usrgrpid|discovery_groupid|
ROW   |1       |10m                |1-5,09:00-18:00|7             |5                |

TABLE |graph_theme
FIELDS|graphthemeid|theme     |backgroundcolor|graphcolor|gridcolor|maingridcolor|gridbordercolor|textcolor|highlightcolor|leftpercentilecolor|rightpercentilecolor|nonworktimecolor|colorpalette                                                                                                                                      |
ROW   |1           |blue-theme|FFFFFF         |FFFFFF    |CCD5D9   |ACBBC2       |ACBBC2         |1F2C33   |E33734        |429E47             |E33734              |EBEBEB          |1A7C11,F63100,2774A4,A54F10,FC6EA3,6C59DC,AC8C14,611F27,F230E0,5CCD18,BB2A02,5A2B57,89ABF8,7EC25C,274482,2B5429,8048B4,FD5434,790E1F,87AC4D,E89DF4|
ROW   |2           |dark-theme|2B2B2B         |2B2B2B    |454545   |4F4F4F       |4F4F4F         |F2F2F2   |E45959        |59DB8F             |E45959              |333333          |199C0D,F63100,2774A4,F7941D,FC6EA3,6C59DC,C7A72D,BA2A5D,F230E0,5CCD18,BB2A02,AC41A5,89ABF8,7EC25C,3165D5,79A277,AA73DE,FD5434,F21C3E,87AC4D,E89DF4|
ROW   |3           |hc-light  |FFFFFF         |FFFFFF    |555555   |000000       |333333         |000000   |333333        |000000             |000000              |EBEBEB          |1A7C11,F63100,2774A4,A54F10,FC6EA3,6C59DC,AC8C14,611F27,F230E0,5CCD18,BB2A02,5A2B57,89ABF8,7EC25C,274482,2B5429,8048B4,FD5434,790E1F,87AC4D,E89DF4|
ROW   |4           |hc-dark   |000000         |000000    |666666   |888888       |4F4F4F         |FFFFFF   |FFFFFF        |FFFFFF             |FFFFFF              |333333          |199C0D,F63100,2774A4,F7941D,FC6EA3,6C59DC,C7A72D,BA2A5D,F230E0,5CCD18,BB2A02,AC41A5,89ABF8,7EC25C,3165D5,79A277,AA73DE,FD5434,F21C3E,87AC4D,E89DF4|

TABLE |globalmacro
FIELDS|globalmacroid|macro            |value |description|type|
ROW   |2            |{$SNMP_COMMUNITY}|public|           |0   |

TABLE |regexps
FIELDS|regexpid|name                                        |test_string|
ROW   |1       |File systems for discovery                  |ext3       |
ROW   |2       |Network interfaces for discovery            |eth0       |
ROW   |3       |Storage devices for SNMP discovery          |/boot      |
ROW   |4       |Windows service names for discovery         |SysmonLog  |
ROW   |5       |Windows service startup states for discovery|automatic  |

TABLE |expressions
FIELDS|expressionid|regexpid|expression                                                                                                                                                            |expression_type|exp_delimiter|case_sensitive|
ROW   |1           |1       |^(btrfs&pipe;ext2&pipe;ext3&pipe;ext4&pipe;reiser&pipe;xfs&pipe;ffs&pipe;ufs&pipe;jfs&pipe;jfs2&pipe;vxfs&pipe;hfs&pipe;apfs&pipe;refs&pipe;ntfs&pipe;fat32&pipe;zfs)$|3              |,            |0             |
ROW   |3           |3       |^(Physical memory&pipe;Virtual memory&pipe;Memory buffers&pipe;Cached memory&pipe;Swap space)$                                                                        |4              |,            |1             |
ROW   |5           |4       |^(MMCSS&pipe;gupdate&pipe;SysmonLog&pipe;clr_optimization_v2.0.50727_32&pipe;clr_optimization_v4.0.30319_32)$                                                         |4              |,            |1             |
ROW   |6           |5       |^(automatic&pipe;automatic delayed)$                                                                                                                                  |3              |,            |1             |
ROW   |7           |2       |^Software Loopback Interface                                                                                                                                          |4              |,            |1             |
ROW   |8           |2       |^(In)?[Ll]oop[Bb]ack[0-9._]*$                                                                                                                                         |4              |,            |1             |
ROW   |9           |2       |^NULL[0-9.]*$                                                                                                                                                         |4              |,            |1             |
ROW   |10          |2       |^[Ll]o[0-9.]*$                                                                                                                                                        |4              |,            |1             |
ROW   |11          |2       |^[Ss]ystem$                                                                                                                                                           |4              |,            |1             |
ROW   |12          |2       |^Nu[0-9.]*$                                                                                                                                                           |4              |,            |1             |

TABLE |config_autoreg_tls
FIELDS|autoreg_tlsid|tls_psk_identity|tls_psk|
ROW   |1            |                |       |

